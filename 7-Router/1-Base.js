/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

1- Multi  page app  lifecycle ( MPA )   2 - Single  page   app  lifecycle ( SPA )     ما به طور کلی دو دسته سایت داریم 

1 - MPA :  و حالا به ازای هر اکشنی که کاربر با سایت امون داشته باشه سرور میاد HTML در این حالت ما یک درخواستی رو به سمت سرور میفرستیم و سرور هم یک فایلی رو به سمت ما میفرسته برای مثال یک فایل 
میشه  Refresh و یک فایل رو برای ما میفرسته و در این بین به ازای هر دریافت و پاسخی که با سرور داریم یکبار سایت امون 

2 - SPA : به AJAX امون رو میگیره و و از اون جا به بعد درخواست هایی که ما به سمت سرور استفاده میکنیم با استفاده از  HTML در این حالت در اولین درخواست به سمت سرور میایم و فایل مربوطه برای مثال فایل 
صورت یک فایل جی سون هستش که این باعث میشه صفحه ما دیگه مجدد رفرش نشه

1 - Hash  2- History    خوب ما برای پیاده سازی مسیر ها با استفاده از جاوااسکریپت به صورت کلی میتونیم بیایم و از دو تا تابع یا متد استفاده بکنیم

====================================================================================================================================================

api history : میاد و برای ما یک تاریخچه از  فعالیت کاربر در اینکه وارد چه صفحه هاتی شده رو نگه می داره 

history.length : مارو بهمون می ده state که میاد و طول اون مقادیر

history.state :  هستش که اگه بخایم بیایم و یک مقداری رو در داخلش قرار بدهیم باید از جاوااسکریپت استفاده بکنیم با صدا کردن این تابع میتونیم مقدار موجود null که به صورت پیش فرض مقدار اون برابر با 
رو بفهمیم  state 

history.pushState( state, "titile که معمولا مرورگر ها ساپورت نمیکنند و بهتره خالی وارد کنیم " , "adreesBar" )  که این مقدار سوم رو که عوض میکنیم صفحه امون رفرش نمیشه

history.forward // history.back : امون هستش که وقتی میایم و از توابع بالا استفاده میکنیم  state یک سری فانکشنالیتی هستند که در داخل پروتوتایپ این آبجکت قرار داره که برای جابه جایی بین مقادیر
popState در پشت پرده میاد و از یک رویداد استفاده میکنه به نام های 

history.go :  این تابع میاد و به عنوان مقادیر ورودی یک عدد رو دریافت میکنه و مشخص میکنه که چه تعداد رو باید بریم جلو  و چه تعداد رو لازم هستش که بیایم و عقب که صفحه فعلی رو به عنوان 0 در
نظر میگیرد و برای عقب رفتن مقدار -1 و برای جلو 1 استفاده میکنیم

====================================================================================================================================================

- api Location : window.location  / location  این آبجکت یکسری اطلاعات مفید رو میاد و به ما میدهد که عبارت اند از

href :  میتونیم بیایم و کل اون آدرس پراپرتی امون رو به دست بیاریم    //    protocol : "http"    //    hostName : "example.org"   //    port : 8888   //   pathname : /foo/bar 

search : ?q=baz   //    Hash :  #bang

====================================================================================================================================================

2- Dynamic Routing    1- Static Routing   خوب حالا که این مفاهیم گفته شده ما به طور کلی برای مسیر دهی کردن به برنامه و کامپوننت هامون دو راه کلی داریم

- Static Routing  : قبل از اینکه برنامه ما استارت و شروع بشه مسیر دهی مارو شروع میکنه و بیشتر در سمت بک اند میاد و انجام میشه و به برنامه ری اکتی ما میگه وقتی این آدرس اومد و مچ شد چه کامپوننتی رو بیاد
میگویند nesting Routing و برامون مچ بکنه برای مثال با استفاده از اکسپرس و نود به شیوه زیر مسیر دهی میکردیم که به این شیوه 

app.get( "/" , handleIndex )      //     app.get( "/invoices" , handleInvoices)      //      app.get( "/invoices/:id" , handleInvoices )          app.get( "/invoices/:id/edit" , handleInvoicesEdit )

- Dynamic Routing : میایم و در داخل کامپوننت هامون مشخص میکنیم که چه روت ها یا مسیر هایی بیاد و برامون ایجاد بشه و به صورت داینامیک و در زمان اجرا اون رو مشخص میکنیم و پیکج هایی مثل ری اکت روتر
و ما بقی هم از این مسیر میان و استفاده میکنند

====================================================================================================================================================

خوب حالا در اینجا میخایم بیایم و یک مسیر ساده با استفاده از همین مفاهیم پیاده سازی بکنیم در ابتدا میایم و یک فایل درست میکنیم به نام روت و مسیر امون رو در اون می نویسیم

const generateId = (function () {  let id = 0; return () => {     id += 1;         return id;   }; } ) ( );
   
export default function Routes({ path, children }) {  const [ignore, forceUpdate] = useReducer((x) => x + 1, 0);
   
useEffect(() => {  const id = generateId();   register(id, forceUpdate);  return () => {     unregister(id);        };     }, []);
       
const pathName = window.location.pathname;       if (pathName !== path) {      return null;     }     return children;    }
        
درست میکنیم  history  حالا یک فایل به نام 

const instances = {};

export function register(id, callback) {  instances[id] = callback; }
   
export function unregister(id) {     delete instances[id]; }

export function historyPushState(state = {}, title = "", to) { window.history.pushState(state, title, to);    Object.keys(instances).forEach((id) => instances[id]()); }
    
 حالا هم یک فایل به نام لینک درست میکنیم و بعد میایم و کدهایی که باید برای کلیک اون هستش درست میکنیم

import { historyPushState } from "./histoty";
export default function Link({ to, children }) {  function handleClick(e) {   e.preventDefault();    historyPushState(to);     }
return (       <a href={to} onClick={handleClick}>     {children}         </a>     ); }
  
حالا همه چیمونو درست کنیم و فقط کافیه بیایم و در داخل فایل اپ امون مسیرهامون رو تعریف کنیم    

function App() {
    return (
        <>
            <ul>
                <li>    <Link to="/HomePage">HomePage</Link>       </li>
                <li>    <Link to="/Blog">Blog</Link>                              </li>
                <li>    <Link to="/Auth">Auth</Link>                             </li>
            </ul>
            <Routes path="/">              <HomePage />          </Routes>
            <Routes path="/Blog">      <Blog />                      </Routes>
            <Routes path="/Auth">     <Auth />                      </Routes>
        </>    ); }

 ====================================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
