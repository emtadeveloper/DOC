/*
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

یکی از مهم ترین انتقاداتی که به ریداکس بوده برای این که تمام موارد اون رو پیاده سازی بکنیم باید یک حجم کد بسیار زیادی رو بنویسیم و یا از پکیج های جانبی استفاده بکنیم  حالا ریداکس تولکیت اومده و یک جور
های ریداکس رو رعایت بکنیم رو در داخل خودش قرار میده bestPractise پکیج با حجم کد کمتر و بهینه تر که در واقع یک استاندار که ما رو مجبور میکنه که بیایم و همه ی 

npm install @reduxjs/toolkit 

 رو هم هندل میکنه composeWithDevTools  این پکیج خودش به صورت پیش فرض میاد و برای ما 

رو در اختیار ما قرار میده API میاد و یکسری redux toolkit

1- configureStore : هامون و reducer میتونیم از اون استفاده بکنیم و چیزی رو که به عنوان مقدار اول میایم و بهش پاس میدیم یک آبجکت هستش که میتونیم در داخل اون createStore به جای استفاده از 
هامون که نیاز داریم رو کانفیگ بکنیم و به صورت متمرکز با یک فرمت خوانا تر بیایم و انجامش بدیم enhancer هامون و  middleware 

 هامون استفاده بکنیم و خودش پیش فرض این کار رو برای ما انجام میدهد  reducer برای یکی کردن combineReducer  دیگه نیازی نداریم که بیایم و از  API ما وقتی از این 
 thunk  پیش فرض رو ایجاد میکنه از جمله enhancer و middleware برای ما میاد و به صورت پیش فرض یکسری  API این 

  const store =  configureStore({ 

   reducer ,
   middleware : ( getDefaultMiddleware )=>  getDefaultMiddleware () , 
   devTools : process.env.NODE_ENV !== " production "  , 
   preloadedState ,
   enhancer : [reduxBatch]  که نیاز داریم رو میتونیم به صورت یک ارایه بیایم و بهش پاس بدیم  enhancer هر مدل 

  })

 رو اضافه بکنیم کافی هستش که بیایم و به شیوه زیر در داخل آبجکت بالا عمل بکنیم middleware نکته : برای این که بیایم و یک 

middleware : ( getDefaultMiddleware )=>  getDefaultMiddleware ( ) .concat( logger ) 

middleware : ( getDefaultMiddleware )=> [ ... getDefaultMiddleware( ) , logger ] 

 
reduxtoolkit  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const reducer = {  todos : todoSlice , filters : filterSlice }   export default reducer

import { configureStore } from "@reduxjs/toolkit";
import reducer from "./reducer";

 const store  =  configureStore({ reducer })

 export default store

====================================================================================================================================================

2- createAction : رو  Type  هستش که به جای این که ما بیایم و توابع اکشن امون رو خودمون بنویسیم با استفاده از این تابع می تونیم بیایم و از اون استفاده بکنیم که به عنوان ورودی یا پارامتر اول میاد و API یک
رو ازمون میگیره payload  میگیره و به عنوان ورودی یا پارامتر دوم هم 

 برامون در نظر میگیره البته این حالت برای موقعیتpayload رو برامون ایجاد میکنه و هر مقداری که به عنوان پارامتر ورودی بهش بدیم به عنوان مقدار payload به صورت خودکار میاد و مقدار  createAction
 هایی هستش که ما داریم از یک مقدار به عنوان پارامتر ورودی استفاده میکنیم و موقعی هایی که پارامتر ورودی امون بیشتر از یکی هستش رو فقط یکی اولش رو ارسال میکنه

export const todoAdded = (todo) => ({ type : "todos / todoAdded " , payload : todo })

// reduxtoolkit

 که یک پکیج که برای ما یک آیدی یونیک درست میکنه  nanoid  یک پکیج رو به ما تحویل میدهد به نام reduxtoolkit
 
 
 todoAdded.toString ( ) رو برای ما بر میگردونه Type  رو اگر فراخوانی بکنیم کاری که برای ما میکنه مقدار
 
 reduxtoolkit  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 export const todoAdded = createAction ( " todos/todoAdded " )

const  todoAdded = createAction( " todos / todoAdded ", (id , text ) => {   return {  payload : {   id , text }  }  }   )   type  // payload

====================================================================================================================================================

3- createReducer : استفاده میکنیم builder  میایم و از  switch استفاده کرده   همچنین به جای استفاده از   immer  هامون که اومده و در داخل خودش از پکیج reducer هستش برای درست کردن  API یک

addDefaultCase و  addMatcher  دو تا تابع دیگه رو هم دریافت میکنه به نام های addCase علاوه برا builder تابع 

addMatcher : میاد و مستقیما تایپ رو به ما نشون میده  به عنوان پارامتر اول میاد و یک تابع رو دریافت میکنه که اون تابع به عنوان پارامتر ورودی میاد و یک اکشن رو دریافت میمکنه 
و هر لاجیکی که نیاز داشته باشیم در نهایت یک بولین برای ما بر میگردونه و موقعی که درست باشه میاد و پارامتر دومی رو برای  یک تابع که وضعیت و اکشن رو میگیره رو برای ما اجرا میکنه
در این هستش که فقط نوع مقایسه میاد و تغیر میکنه  addCase و تنها تفاوت اش با حالت 

addDefaultCase :هامون اجرا نشه میاد و اجرا میشه و اگر نیایم و قرارش نیدیم بهمون خطایی رو ایراد نمیگیره  Case زمانی که هیچ کدوم از 

 reduxtoolkit  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const  increment  =  createAction( " counter / increment " )
const  decrement =  createAction( " counter / decrement " )

const  inializeState = { value : 0 }

const counterReducer = createReducer( inializeState , ( builder )=> { 
      builder . addCase('increment', (state, action) => {
          state.value++ })
       . addCase('decrement', (state, action) => {
          state.value-- })
})

====================================================================================================================================================

4- createSlice : هامون   Action ها و هم Reducer  رو فراخوانی میکنه و با یک بار فراخوانی اون آبجکت میاد و برای ما هم  createAction و createReducer هستش که میاد و در داخل خودش  Api یک 
رو فراخوانی میکنه

name : prefix هستش todos امون رو قرار می دهیم که همون      initialState : {}           reducers  هر کدوم از نام های توابع رو به عنوان یک کلید در نظر میگیرد  

extraReducer  استفاده کردیم در اون ها بهتر هستش که بیایم و در این قسمت قرارشون بدیم redux-thunk ما هستند و ما اومدیم و معمولا و از  async مواردی که معمولا پیرامون درخواست های 
امون هستند رو میایم و در این جا قرارشون میدیم slice  کلن کار هایی که خارج از بحث مدیریت کردن خود اون


reduxtoolkit  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import { createSlice } from "@reduxjs "

const todosSlice = create( { name : "todos " ,  initialState ,  reducers : { 
   
    todoAdded ( state , action ) { 
        const todo = action.payload 
        state.entites[todo.id] = todo } , 

       رو در روش های بالایی دریافت کردیم که برای این که مثل بالایی شیوه دریافت امون متفاوت هست به این شکل   payload تفاوت این مورد با بالایی این هستش که ما مستقیما اومدیم و مقدار 
       دقیقا لاجیک اضافه تری که در داخل تابع داریم رو اینجا اضافه میکنیم reducer ( ) , prepare ( ) رو دریافت میکنیم color , id و میایم و یک آبجکت رو بهش پاس میدیم و بعد به اون شیوه قبلی 
          
        colorChanged : {
            reducer ( state , action ) { 
                const { color , id } = action.payload 
                state.entities[id].color = color
            },
            prepare( todoId , color ) { لاجیک اضافه ترمون رو این جا میایم و قرار میدهیمprepare
                return { payload : { id : todoId , color }}
            }
        }

} } )

 action  و  reducer میاد و دو تا چیز رو برامون برگشت میدهد createSlice  

export const  { todoAdded , todoToggled } = todoSlice.actions

export default  todosSlice.reducer

====================================================================================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
