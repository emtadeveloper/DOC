/*
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

cancellation :  به دو صورت و در دو مقطع زمانی ما میتونیم بیایم و این کار رو انجام بدیم یکی زمانی هستش که هنوز اون عملیات انجام نشده است و دومین حالت موقعی هستش که اون درخواست اجرا میشه و در 
زمان اجرا شدن ما میتونیم اون درخواست رو بیایم و اجراش بکنیم

خوب یکی از کاربرد های این روش در این هستش که اگر اطلاعات کاربر رو داشته باشیم دیگه نیازی نیستش که دوبارخ درخواست بزنیم به سرور و بریم و اون هارو دریافت کنیم و باید جلوی درخواست مجدد رو بگیریم

====================================================================================================================================================

حالت اول

export const fetchTodos = createAsyncThunk("todos/fetchTodos", async (param , thunkApi ) => {
    return await  client.get("todos")
},{
    condition : ( param , { getState } ) => {
        const { todo } = getState()
        if( "pending " === todos.status ) { 
            return false
        }
    }
})

====================================================================================================================================================

حالت دوم

const promise = store.dispatch(fetchTodos())
promise.abort()

====================================================================================================================================================

حالت سوم

function  MyComponent ( props ) {
    const dispatch = useAppDispatch()
    React.useEffect(()=>{
        const promise = dispatch(fetchUserById(props.userId))
        return ()=> promise.abort()
    })
}

====================================================================================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
