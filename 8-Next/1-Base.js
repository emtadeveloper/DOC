/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

 -  SPA  - SSG - SSR  ما به طور کلی با استفاده از جاوااسکریپت 3 نوع برنامه رو میتونیم بیایم و تولید بکنیم

تولید می شوند با چالش های زیادی رو به هستند که یکی سئو و یکی بحث پرفورمنس هستش که برای حل این مشکل میایم و از راه حل های زیر استفاده میکنیم SPA که حالا اپلیکشن های که به صورت

دلایل این که برنامه های ری اکتی سئو خوبی ندارند 

1-  رو دریافت میکنند و بعد روی مرورگر کاربر با استفاده از جاوااسکریپت اون رو 0 تا 100 می سازند API  برنامه های ری اکتی 
2- بسیار زیاد است و این زمان برای موتور های جست و جو بسیار مهم هست  SPA در اکصر موارد زمان اولیه برای بارگزاری صفحه برنامه های ری اکتی یا مدل

next js : به اپ ما میدهد  و در همه جا لازم نیستش که بیایم و ازش استفاده seo و ssr و route  داریم که یکسری امکانات رو به مثل  Pre rendering یک فریمورک ری اکتی هستش  برای تولید برنامه هایی که نیاز به 
بکنیم برای مثال در طراحی یک صفحه داشبورد نیازی به استفاده از اون نداریم

Client Side Rendering ( CSR )  :  حالت عادی برنامه های ما هستش که سرور هیچ دخاتی نداره و با هر  درخواستی که کاربر داره فقط کد های جی اسی رو تحویل کاربر امون میده که برای نمایش کد های ما به کاربر
وقتی میایم و جی اس مرورگر رو غیر فعال میکنیم یک صفحه سفید رو به ما نشون میده چون که برنامه های ما میاد و به طور کلی دو حالت - loading screen  - skelton  -fully renderd page باید 3 مرحله طی بشه
1-  initial load App is not rendered          2- Hydration React Components are initalized  and App becomes interactive  اجرا داره

====================================================================================================================================================

Pre rendering :  برای ما میفرسته خوب این مسئله به دو صورت هستش HTML یعنی سرور از قبل اون برنامه مارو میاد و رندر میکنه و خروجی رو داره و اون خروجی رو برای ما ارسال میکنه  و خروجی رو به صورت
استفاده بکنیم چون همه چیز هایی که میخایم از قبل آماده شده باعث میشه که پرفومنس بسیار بالایی داشته باشیم همچنین بحث سئو سایت امون  Pre rendering  چرا باید از  

-  initial load Pre rendering HTML is displayed         - Hydration React Components are initalized  and App becomes interactive

1 - Static site Generation :  میکنیم  کدهامون تبدیل به جی اس میکنیم یا فایل باندل تولید میکنیم و همچنین یک خروجی  build  موقعی که ما اومدیم و پروژه امون رو تموم کردیم میایم و برنامه امون رو اصطلاحا 
روبرامون تولید میکنه و کاربر هر درخواستی رو سمت سرور بفرسته  اون فایل رو براش ارسال میکنه صفحاتی که به صورت لندینگ هستند و از قبل نوشته شدند مثل صفحات پست بلاک امون داک های نرم افزار ها HTML
Gatsby این ها بهتره به این صورت باشند که یک بار تولید میشه و هربار که کاربر درخواست فرستاد براش فرستاده میشوند

نکته : این حالت مدل پیش فرض خود نکس هستش  ,و چیزی که باید مدنظر قرار بدیم قبل از اینکه کاربر اطلاعاتی رو بفرسته این اطلاعات در حال تولید شدن هستش پس بنابر این در داخل پستمن
وقتی تست بگیریم چیزی رو مشاهده نمیکنیم
  
2- Server Side Rendering :  با هر بار درخواست کاربر به سمت سرور تولید میشه و مجدد براش ارسال میشه و خروجی هم جایی ذخیره نمیشه زمانی که نتونیم از قبل اون صفحه رندر بکنیم و خروجی رو رندر بکنیم 
مثل  صفحات سرچ امون که بر مبنای گزینه های انتخابی کاربر هستش و حالت های دیگه خروجی صفحه ما زیاد تغیر میکنه و تغیرات زیادی داره و ممکنه با هر بار رندر یک خروجی داشته باشه 

====================================================================================================================================================

next ساختار بندی پوشه ای 

1- public :  آیکون برنامه  امون که میتونیم به صورت favicon.ico محتویات استاتیک صفحه مارو درون خودشون دارند که به صورت عمومی در دسترس همه هست مثل   
به اون ها دسترسی داشته باشیم  http://localhost:3000/favicon.ico

2- style : که استایل هایی که مختص به کامپوونتت  Home.module.css درونش هست که استایل های گلوبال امون درون اون قرار داره و دومی هم یک فایل   globals.css  به طور معمول یک فایل  
 componentName.module.css  هستند درون اون قرار میگیرند برای اینکه همچنین مدل کامپوننت استایل هایی رو بتونیم استفاده بکنیم باید از این الگو در نکس رو رعایت کنیم Home

رو نداریم globals.css نکته : ما در کامپوننت هایی که میسازیم اجازه وارد کردن

3- pages / _app.js :   است که تمام پروژه ما درون اون نمایش داده میشه یعنی همه کامپوننت های ما فرزند این کامپوننت اصلی هستند برای همین اگر خواستیم MyApp  این فایل یک کامپوننت پدر به نام 
 که هدر و فوتر هامون برای همه صفحه هاتمون در اون قرار بگیره layout که عناصر خاصی رو بیایم و در همه ی صفحه ها نمایش بدیم باید بیایم و اون رو در این جا قرارشون بدیم برای مثال اگر بخایم بیایم و یک 
 به شیوه زیر عمل میکنیم

import { ReactNode } from "react";

import styles from "../styles/Layout.module.css";  

interface PropType {   children: ReactNode; }

const Layout = ({ children }: PropType) => {  return (    <div className={styles.container}>     <main className={styles.main}>{children}</main>     </div>   ); };

export default Layout

// _app.js
 
import "../styles/globals.css";

import type { AppProps } from "next/app";

import Layout from "../components/Layout";

export default  function MyApp({ Component, pageProps }: AppProps) {

return (  <Layout>     <Component {...pageProps} />     </Layout>     ); };

====================================================================================================================================================

Tag Head : امون معمولا کنترل اش میکردیم رو اضافه بکنیم به این صورت که اول میایم و اون رو اضافه میکنیم HTML ما در داخل نکس میتونیم این تگ رو که در فایل های 

import Head from "next/head";

 <Head>

        <title>My Next.js website</title>

        <meta name="description" content="a demo for roxo.ir/blog" />

        <link rel="icon" href="/favicon.ico" />

 </Head>

====================================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
