/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

Pages : هر کامپوونت ری اکتی که در این پوشه قرارشون بدیم به عنوان یک مسیر در نظر گرفته میشه و یک روت بهشون تعلق میگیره همچنین هر پوشه ای هم که بسازیم به عنوان مسیر در نظر گرفته میشه

و مشاهده میکنیم که برای مسیر دهی میتونه کمک امون بکنه و یکسری ابجکت و توابع داخل خودش داره url نکته : ما به طور معمولی در داخل صفحات امون اگر بیایم و یک لاگ معمولی بگیریم یک آبجکت 
صفحه رو تغیر بدیم بدون ایکه چیزی به وضعیت امون اضافه بکنیم و یکسری چیز های دیگه replace برای برگشتن به عقب back مثل 

توابع خاصی هستند که به ما اجازه می دهند که داده های خارجی رو دیافت کرده و در صفحات خودمون نشون بدیم که 3 تا متد اصلی برای این موضوع داریم next در data fetching مبحث 

1- getStaticProps : زمان ساختن وب سایت در سیستم خودتان دریافت می کند و برای درخواست های سرور امون میتونیم از این متد استفاده  بکنیم build time  داده های مورد نیاز یک صفحه را در  

درست کنیم و درخواست امون رو در اون قرار دهیم post.js و یک فایل lib نکته : همچنین برای فرستادن درخواست هامون میتونیم بیایم و یک پوشه درست کنیم به نام 

//  post.js

import axios from "axios"
export const loadPosts = async () => {     const { data: posts } = await axios.get('http://localhost:5000/posts')      return posts  }

// pages / Index

import { loadPosts } from '../lib/posts'

export default function Index({ posts }) {
const postTitles = posts ? posts.map(post => <p key={post.id}>{post.title}</p>) : <p>No posts!</p>
          return (     <div>    {postTitles}         </div>   ) }
    
export async function getStaticProps ( ) {      const posts = await loadPosts()  return {   props: { posts   }    }    }

ذخیره میکنه و زمانیکه html json  میاد و اجرا میشه و خروجی و ریسپانسو که از اون دریافت میکنه اون موارد رو به صورت فایل های getStaticProps میگیریم یک بار تابع  build ما موقعی که میایم و پروژه امون رو
پروژه رو استارت میزنیم دیگه درخواستی سمت سرور اجرا نمیشه و از اطلاعاتی که قبلا ذخیره کرده میاد و استفاده میکنه  

نگیریم کاربر نمیتونه بیاد و اون هارو مشاهده بگیره و برای رفع اون باید از راه حل build میگیریم اگر در موقع بیلد اطلاعات امون تغیر بکنه دیگه به اون ها دسترسی نداریم و تا موقعی که دوباره  build  زمانی که پروژه رو 
های دیگه استفاده بکنیم
  
====================================================================================================================================================

2- getStaticPaths : مشخص میکنه که چه مسیرهایی باید بگیره و مقدار  Paths هایی میتونه وارد بکنه که یک شی رو برگشت میده که دو تا کلید میگیره که اولی slug با استفاده از این تابع میتونیم مشخص بکنیم کاربر چه 
هامون مثال زیر رو نگاه کنید Paths که یک مقدار بولین که مشخص میکنه چه مسیر هایی بگیره همه یا فقط همون fallBack  دوم

با استفاده از این تابع دیگه نکس از قبل از بیلد شدن مقادیری که میخان اجرا بشن رو میدونه و به ما مقدار تعریف نشده رو دیگه بر نمیگردونه

import { useRouter } from "next/router";
import { loadPosts, getPost } from "../../lib/posts";

function Post({ post }) {

    const router = useRouter();
    const { slug } = router.query;

    return (         <div>     <div>Post slug: {slug}</div>  <div>Content: {post.content}</div>      </div>     ); }

export async function getStaticPaths() {

    const posts = await loadPosts();
    const paths = posts.map((post) => ({ params: { slug: post.slug },     }));

          return {        paths,  fallback: false,   }; }

export async function getStaticProps({ params }) {

    const post = await getPost(params.slug);

    return { props: {      post: post[0],   },  }; }
        
export default Post;

درست کرده و در  posts  برامون درست کرده و در داخل اون یک پوشه با نام  pages  میبینیم که اومده و یک پوشه به نام  .next  میگیریم یک پوشه برامون درست میکنه به نام build ما موقعی که میایم و از پروژه امون 
رو به وجود آورده  html و json  رو درست کرده و به ازای هر یک از پست هامون یک فایل  [slug].js  داخل اون هم اومده و یک فایل

====================================================================================================================================================

خوب  ما وقتی از پروژه امون یک بیلد میگیرم خوب برای پست هامون میاد و یکسری صفحه ایجاد میشه حالا اگر بعد از بیلد گرفتن ما پست های جدید اضافه کنیم چی و باید چکار کنیم خوب چون اون پست جدید
در زمان بیلد نبوده بعدا هم کاربر نمیتونه اون رو مشاهده بکنه و با خطای 404 مواجه میشه خوب یک راه حل اینه که هر موقع یک پست جدید درست شد دوباره بیایم و یک بار پروژه امون رو بیلد بگیریم خوب این 
راه حل زیاد منطقی نیستش 

میتونیم بیایم و مدیریت اش بکنیم fallback خوب این مورد رو ما با استفاده از 

fallback: false یعنی اگر اون مسیری که معرفی کردیم در زمان بیلد کردن موجود بود بیا و به کاربر نمایش بده و اگر موجود نبود بعدا برای همه ی اون ها خطای 404 دریافت میکنه

fallback : true  بکنیم fallback : true دربالا برابر با تعریف نشده هستش زمانی که ما مقدار Content خوب اگر همچین کاری رو بکنیم طبق مثال بالا اجازه بیلد گرفتن بهمون نمیده و بهمون خطا میده که مقدار
برامونو ببین آیا اون مسیر یا پست جدید معتبر و getStaticProps  به نکس میگیم که ما ممکنه یکسری آدرس ها داشته باشیم که در زمان بیلد گرفتن موجود نباشه و بیا و بعد از بیلد گرفتن یک بار دیگه هم تابع
 در مثال بالا فراخوانی router روبرامون ایجاد میکنه و ما باید این کار رو مدیریت  اش  بکنیم زمانی که ما میایم و تابعfallback موجود هستش یا خیر و بیا خروجی رو برای ما برگشت بکن در این حالت یک حالت
برای ما بر میگردونه  یعنی اگر مسیری که دنبالش هستیم موجود نبود بیایم و با استفاده از این تابع میتونیم بیایم و یک چیز دیگه ای رو نمایش بدیم isFallBack میکنیم یک مقدار 

    const router = useRouter();
    const { slug } = router.query;

    if (router.isFallback) {  return <div> Loading ... </div>   }
       
    return (         <div>     <div>Post slug: {slug}</div>  <div>Content: {post.content}</div>      </div>     ); }

next /   server / pages / posts / [ slug ].html   با این حالت وقتی میایم و بیلد میگیریم میتونیم در داخل پوشه  

Content ما اجرا نمیشه و مستقیما میره و مقدار تعریف نشده isFallBack زمانی اتفاق میوفته که اولین بار داریم آدرس رو میفرستیم پس وقتی برای دومین بار اطلاعات ما ارسال میشه دیگه تابعf allback
رو بر میگردونه 

====================================================================================================================================================

خوب حالا اگر سایت ما فروشگاهی بود و قرار بود همه صفحات بیایم و بیلد بگیریم خیلی زمان بیلد گرفتن امون طولانی میشه و عملا در این شرایط استفاده از راه حل بالا عقلانی نیست 

fallback رو نمایش بدیم یا به کاربر میگیم صفحه موجود نیست یا اون محصول یا پست رو نمایش بدیم در این حالت از حالت بلاک   و  fallback حالا ما نمیخایم بیایم و این
قرارش میدیم

export async function getStaticPaths() {

    const posts = await loadPosts();
    const paths = posts.map((post) => ({ params: { slug: post.slug },     }));

          return {        paths,  fallback: "blocking ",   }; }

نیست و حذف اش میکنیم  isFallback حالا دیگه نیازی به          

 باهم داریم ssr ssg استفاده میکنیم ترکیب blocking  ما موقعی که از 

ssg : تولید شده بود و کاربر  هر بار درخواست میفرسته دیگه تولید نمیشه Html  json از قبل صفحات امون به صورت 
  
ssr : تولید میکنیم و خروجی رو بهش نشون میدیم Html  json  ما از قبل چیزی نداریم و کاربر هر موقع که درخواست رو میفرسته میایم وهمون موقع

====================================================================================================================================================

 استفاده میکنیم محتوای صفحه امون یک بار تولید میشه و اگر بخایم بیایم و اون رو تغیر بدیم حالا باید چکار کنیم خوب ما نیاز داریم که خود نکس جی اس بیاد و این پروسه رو برامون مدیرت  ssg موقعی که داریم از 
 استفاده میکنیم که مشخص میکنه هر مثلا 10 ثانیه این صفحه ما معتبر هستش و بعد از اون کاربر باید بیاید و یک درخواست بفرسته به سرور و یک بیلد دیگه  revalidate : 10 اش بکنه برای همین میایم و از قابلیت 
 برامون میگیره و ارسال میکنه به سمت کاربر و خودش میاد و این رو حل میکنه

export async function getStaticProps({ params }) {

const post = await getPost(params.slug);

return { props: {      post: post[0],  revalidate : 10   },   } ;   }

====================================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
