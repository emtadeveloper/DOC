/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

component Images : یا تغیر سایز تصاویر و یا حتی بهینه سازی های تصاویر رو انجام بدیم و بهتره از این resizeing  کامپوننتی هستش که خود نکس در اختیار ما قرار میده و میتونیم با استفاده از اون عملیات های 
 به بعد به جای استفاده از تگ img خود html  از این تگ استفاده بکنیم 

نکته : زمانی که ما میایم و ابعاد رو با استفاده از خاصیت های width / height  تغیرشون میدیم به این شکل نیست که فقط استایل هارو تغیر بده بلکه میاد و در پس زمینه از اون عکس اصلی نمونه های دیگه ای رو ایجاد
میکنه و قرارشون میده که به صورت پیش فرض چند تا سایز رو خودش به این شکل پیش فرض قرار میده و به صورت پیش فرض  عکس رو در 60 دقیقه کچ  میکنه

import Image from "next/image"

function HomePage (){
    return (
        <div>
            <div>home</div>
            <Image  src="/sky.webp"  alt="key"   width={300}  height={200}  />
            <Image  src="/sky.webp"  alt="key"   layout="fll"  /> عکس ما کل ابعاد والدشو میاد و پر میکنه
            <Image  src="/sky.webp"  alt="key"   layout="fix"  width={900}  height={900}/>  طول و عرض امون ثابت هستش ولی به واسطه اندازه هایی که دادیم ممکنه صفحه اسکرول بخوره
            <Image  src="/sky.webp"  alt="key"   layout="responsive"  width={900}  height={900}/>  میاد متناسب با پرنت اش برامون یک حالت ریسپانسیو رو ایجاد میکنه 
        </div>
    )
}

استفاده از ویژگی loader که برای لود شدن عکس هامون از سرور میتونیم از اون استفاده بکنیم ما موارد بالا رو بالا رو میتونیم به شکل پایین پیاده سازی بکنیم


const myLoader = ({src , width , quality}) => { return `https : //example.com/${src}?w=${width}&q={quality || 75}` }

const MyImage = (props)=>{  return ( <Image loader={mylLoader}  src="/me.png"  alt="picture" width={500} height={500} />  )   }
 
size :100vw هستش بیاد و چند درصد اون پرنت اشو پر بکنه مقدار پیش فرض اشم  fill  responsive   برابر با  layout  اونم مشخص میکنه در حالت های که مقدار  Image  پراپرتی بعدی که تگ 

quality : کیفیت  که مقدار بین 1 تا 100 میگیره که مقدار پیش فرض اشم 75 و میگه از اون عکس اصلی چقد اون کیفیت اشو بیاد و کاهش بده

priority : به طور خودکار تصاویری فقط لود میشن که در اسکرین کاربر اون هارو مشاهده میکنه و این کارو نکس برامون میکنه تا پرفورمنس بهتری داشته باشیم ما با استفاده از این خاصیت که مقدار پیش فرض اش
  نادرست هستش که اگر بخایم عکس مون زود تر لوود شه اونو درست میکنیم

objectFit  objectPositon  باشه و استایل های اونو تغیر میده fill هم برای حالت هایی هست که مقدار لایت ما برابر با

unoptimized : برای این که مثلا عکس امون رو خودش نیاد و کیفیت اشو تغیر بده باید با استفاده از این پراپس مقدار درست رو بهش بدیم

====================================================================================================================================================

absolute - imports  :   ../ به صورت  index.js به جای شروع کردن مسیردهی از 
بیایم و از روت اون مسیر دهی رو شروع بکنیم برای این کار اول کانفیگ زیر رو انجام میدهیم

jsconfig.json 

{
    "compilerOptions" : {
        "baseUrl" : "."
    }
}

/////////////////////////////////////////////////// path : میتونیم بگیم وقتی فلان چیز رو تایپ کردیم منظورمون چه کامپوننت هایی هستش

{
    "compilerOptions" : {
        "baseUrl" : "."
        "paths" : {
            "@components/*" : ["components/*"]
            "@styles/*" : ["styles/*"]
        }
    }
}

و هر جا خواستیم از  @components  و این ها استفاده میکنیم  


====================================================================================================================================================

_document : قرار بدیم به همین نام که میایم و یک سری تغیرات عمده رو به پروژه امون اضافه بکنیمpages ما یک فایل که به صورت کاستوم هستش رو میتونیم داخل پوشه 

import { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {

. .  .

  render() {
    return (
      <Html>
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument

مثلا متاسب با نیاز امون بیایم و زبان رو تغیربدیم

      <Html  lang="EN">

هیچ لاجیکی رو اینجا قرار نمیدیم و صرفا موارد خیلی خاصی که داریم رو در اینجا قرار میدهیم

====================================================================================================================================================

اگر خروجی کد ما سمت سرور یا کلاینت تفاوت داشته باشه به ما یک خطا یا هشدار رو نشون میده  خوب برای اینکه این خطا رو تولید کنیم میتونیم به شکل زیر عمل کنیم که با یک بار رفرش کردن میتونیم اون هشدار رو
بکنیم

function Home () {
          
     const now = new Date ()

         retrun ( 
           <div > { typeof window !== "undefined" ? "Browser" : "Server " }  چون فقط در سمت کلاینت داریم باید خطا رو بهمون نمایش بده window که ما آبجکت 
           <div >  { now.getMilliseconds() } </div>
         )
}

suppreddHybrationWarning={true}  که حالا اگر خواستیم با این خطا مواجه نشیم باید این پراپرتی به المان هامون با این مقدار بدیم


====================================================================================================================================================

useEffect //  useLayoutEffect  : ما این دوتا هووک رو سمت سرور نداریم و سمت سرور هیچ کاری رو برای ما انجام نمیدن

useLayoutEffect قبل از تموم شدن رندر و نشون دادن نتیجه نهایی به کاربر نمایش داده میشه 

اگر از این ها استفاده بکنیم سمت سرور میاد و به ما هشدار نشون میده

function Home () {

          useLayoutEffect(()=>{   console.log("effect")} ,[ ] )  که ما اگر بیایم و لاگ بگیریم می بینیم که به ما یک خطا رو نشون میده که همچین چیزی رو ما سمت سرور اصلا نداریم
           
         retrun ( <div  </div> )
     
}

 اولین موردی که باید بررسی کنیم این هستش که آیا ما واقعا به useLayoutEffect احتیاجی داریم یا خیر

راه حل 1

بیایم و این لاجیک اشو منتقل بکنیمبه یک کامپوننت فرزند و بعد چک کنیم که ایا باید نمایش داده بشه یا نه با کمک یک وضعیت که سمت سرور و کلاینت اشو چک بکنه برامون

function Childs () {

          useLayoutEffect(()=>{   console.log("effect")} ,[ ] )  
           
         retrun ( <divChilds   </div> )
     
}


function Home () {

     const [showChild , setShowChild ] = useState(false)

          useEffect(()=>{ setShowChild(true) } ,[ ] )
            
         retrun ( <div { showChild && <child/> } </div> )
     
}

 راه حل دوم میایم و چک میکنیم که ایا سمت سرور هستیم یا سمت کلاینت و متناسب با اون از  useEffect و useLayoutEffect 
استفاده میکنیم

hooks  /  /useIsomorphicEffect.jsx

const useIsomorphicEffect = typeof window === "undefined" ? useEffect  : useLayoutEffect
export default useIsomorphicEffect
 
import   useLayoutEffect   from " hook/useIsomorphicEffect "

function Home () {

          useLayoutEffect(()=>{ console.log(" use Isomorphic ")} ,[ ] )
            
         retrun ( <div </div> )
     
}




====================================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
