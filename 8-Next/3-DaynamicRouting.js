/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

Daynamic Routing :  یکسری کامپوننت هایی که داریم ظاهرای یکسانی دارند ولی محتواشون میتونه تغیر بکنه برای مثال پست هامون که کامپوننت یکی میتونه باشه ولی اون محتواهاشون میتونه متفاوت باشه

که به جای این مسیر ها میایم و یک فایل با مسیر زیر می سازیم posts / intro-react  ||  posts/hooks  ||  posts/next-js   برای مثال ما 3 تا مسیر داریم با نام های 

// lib // posts.js

export const getPost = async (slug) => {
    const { data: posts } = await axios.get("http://localhost:5000/posts", { params: { slug } });
    return posts;
};

pages / posts / [ slug ].jsx  و حالا کامپوننت اشو به شیوه پایین میایم و میسازیم

import { useRouter } from "next/router"

export default  function Post ( ) {
    const router = useRouter( )    const { slug } = router.query
              return (  <>  Post : { slug } </>              ) } 

به ما نشون میده و هرچی رو بعد اون بنویسم دوباره در غالب کوئری میتونیمfoo رو دریافت کنیم که مقدار   slug میتونیم query رو وارد کنیم به عنوان  با استفاده از آبجکت /posts/foo  که در داخل مثال بالا ما اگر آدرس 
بیایم و دریافت اشون بکنیم

/post/foo?zoo=123           query : {   slug : "foo"  ,  zoo : "123"  }

رو اگر قرار بدیم نادیه گرفته می شود ما میتونیم بیایم و از قبل تعداد حالت هامون رو مشخص بکنیم که مثلا چه تعداد پست هایی رو داریم برای این کار باید بیایم و از یک تابع استفاده بکنیم به نام slug نکته : اسم تکرای 

====================================================================================================================================================

رو نیاز داریم برای مثال ما یک پشت خاص داریم که یک کامنت خاص اش رو میخایم بیایم Multiple daynamic route segments حالا یک موقع هایی هستش که ما به تعداد مسیر های زیادی نیاز داریم یا اصطلاحا
و تغیر اش بدیم

pages / posts / [ slug ] / [ comment ] 

import { useRoute } from "next/router"

export default Comment ( ) {

    const router = useRouter()
    const { slug , comment } = router.query

    return (   <>    Comment : { slug } / { comment }  </>     ) }

====================================================================================================================================================

catch all routes 

pages/post/[ ... slug ] . js

/post/a => { " slug " : [ " a " ] }        /post/a/b => { "slug " : [ " a " , " b " ] }

ما یک حالتی داریم که تعداد کوئری های که کاربر وارد میکنه مشخص نیست و میخایم همشون بیاد و مچ بشه فقط کافیه یک سه نقطه رو اضافه بکنیم طبق مثال زیر که یک آرایه رو به ما تحویل میده

====================================================================================================================================================

optinal catch all routes

حالت آپشنال یعنی زمانی که کاربر هیچ کوئری رو اصلا وارد نکرد  بخایم اون پیج بیاد و نمایش داده بشه

pages/post/[[...slug]].js

/ post => {}
/ post / a => { " slug " : [ " a" ] }
/post/a/b => { "slug " : [ " a " , " b " ] }

====================================================================================================================================================

یک مطلبی که وجود داره بحث الویت بندی مسردهی های بالاست برای مثال اگر یک مسیر با شیوه های زیر داشته باشیم حالت اول فقط برای حالت اول مچ میشه و حالت های بعدی هم برای حالت های
مد نظر خودشون و در حالت قبلی شون دیگه مچ نمیشن

pages/post/create.js   => post/create
pages/post/[ slug ].js  => post/1   post/abc   حالت های بالایی در اینجا دیگه مچ نمیشه و اولویت نیست
pages/post/[ ... slug ].js => post/1/2  /post/abc/a/b  حالت های بالایی در اینجا دیگه مچ نمیشه و اولویت نیست

====================================================================================================================================================

 استفاده بکنیم link  برای نویگیت کردن در داخل نکس میتونیم بیایم و از 

import Link from "next/link"

prefetch = { true }  مقدر پیش فرض اش اینه هر لینکی که داشته باشیم قبل این که کاربر روشون کلیک بکنه اون موارد مورد نیاز اشو دانلود میکنه که وقتی کلیک کرد کاربر حس بهتری داشته باشه
که مقدار پیش فرض اش درست هست

<Link  href={ `posts/${post.slug} ` } > </Link>   

<Link prefetch = { true }   href={ pathname : "posts/ [ slug ] " , query : { slug : post.slug , foo : 11 } } } > </Link>   

====================================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
