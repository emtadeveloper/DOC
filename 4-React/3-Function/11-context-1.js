/*
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
==============================================================================================================================================================

context :     گلوبال رو مدیریت اش بکنیم در همه جای برنامه امون در دسترس ما از این ویژگی میتونیم بیایم و در  درست کردن صفحه لاگین و state استفاده بکنیم که نیاز داشته باشیم که یک  context   ما موقعی باید بیایم و از 
گلوبال  state استفاده بکنیم به خاطر این که زمانی که ما میایم و یک props driling  احراز هویت کاربرمون و یا تغیر دادن تم صفحه یا چند زبانه کردن سایت امون بیایم و استفاده بکنیم  حالا چرا نباید بیاین و از این روش به جای 
یا فانکشنالیتی دقیقا چه اثری برای ما ایجاد میکنه   state داریم تغیر دادن اون خیلی شفاف نمیشه و ما دقیقا نمیدونیم کدوم کامپوننت امون از این اومده و استفاده کرده و تغیر دادن این  

1 - context       2 -  consume      3  -  provider   ما 3 تا جزء مهم داریم  context API   برای استفاده کردن
  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1 - context :  یک شی هستش که در داخل حافظه امون ذخیره شده است  برای درست کردن همچین  چیزی باید  بیایم و  یک فایل که داخل اون  یک  تابع   جاوااسکریپتی است رو قرار میدهیم و بعد با استفاده از تابع  
اون مقدار کانتکسی که میخایم رو درست بکنیم و بعد بیایم و مقداردهی پیش فرض امون رو انجام بدیم createContext  

const AuthContext = createContext({id  : 1})   export default AuthContext

در داخل صفحه امون نباشد و اگر داشته باشیم میاد و در ابتدا این مقدار  رو برامون میخونه و کاربرد provider قرار میدهیم مال موقعی  هستش که هیچ نوع  createContext  نکته : مقدار پیش فرضی رو که ما میایم و در داخل 
مهم این مقدیر پیش فرض مال موقعی هستش که میایم و تست نویسی رو انجام میدهیم

import React, { useContext } from "react";  import AuthContext from "./auth-context";

export default function UserInfo ( )  { 
  const user = useContext(AuthContext);  ها استفاده بکنیم  consumer موقعی که نمیخایم بیایم و از 
  return <p>user ID  : {user.id}</p>;
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2 -  consumer :   استفاده بکنیم و به عنوان useContext کامپوننتی برای دریافت اطلاعاتمون که میان و وصل می شوند و اطلاعات رو دریافت میکنند که همیشه بروز هستند یا اصطلاحا برای استفاده  از اون باید بیایم و از تابع 
یک فرزند یک تابع رو میاد و دریافت میکنه و ما میتونیم از اون استفاده کنیم همچنین به عنوان پارامتر ورودی کانتکس رو دریافت میکنه
 
مثال استفاده از فانکشنال کامپوننت ها

روش 1

import React, { useContext } from "react";  import AuthContext from "./auth-context";

export default function UserInfo ( )  { 
  const user = useContext(AuthContext);  ها استفاده بکنیم  consumer موقعی که نمیخایم بیایم و از 
  return <p>user ID  : {user.id}</p>;
}

روش 2

export default function UserInfo() {
return (   <AuthContext.consumer> {(user)=> { return <p> user ID : {user.id}</p>  }}  </AuthContext.consumer> ) }
  
یا اصطلاحا مصرف کننده  همیشه  اطلاعات کانتکس رو میاد و از نزدیک ترین پرو وایدر خودش دریافت می کند consumer : نکته        

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3 - provide : کامپوننت هایی هستند که میان و جزء های برنامه ما رو میان و تغیرشون میدهند برای استفاده از این تابع هم کافی هستش که بیایم و از تابع خودش به شیوه زیر استفادهبکنیم تا بعد بتونیم بیایم و مقادیر رو قرارشون
یا نزدیک ترین اون ها به خودش دریافت میکنه provide بدهیم تغیر دهننده مواردی که در داخل کانتکس های  ما قرار دارد  مثال استفاده  از  فانکشنال کامپوننت ها همچنین ما همیشه اطلاعات امون رو میایم و از اخرین 

const [ user, setState ] = useState ( { i d: 9  } );
return ( <AuthContext.Provider value={user}>  <Main />    </AuthContext.Provider> )
     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   

معایب استفاده از کانتکس هم در پروژه های خیلی بزرگ این هستش  که داخل کانتکس  ما نمیتونیم جلو رندر بعضی چیز هارو بگیریم و بهتره از ریداکس استفاده بکنیم

==============================================================================================================================================================
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
