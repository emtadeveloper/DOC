/*
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

sideEffect :  ما موقعی که میایم و یک کامپوننت رو اجرا میکنیم یک سری عملیات هارو میایم و انجام میدهیم مثل ارسال درخواست سمت سرور و یا تغیر دادن یک نود در داخل دام و یا ذخیره یک مقدار در داخل استورج که ما به همین     
میگویند که ما  برای انجام دادن این سری کار ها در داخل فانکشنال کامپوننت ها باید بیایم و یکسری  عملیات هارو انجام بدهیم sideEffect  این ها اصطلاحا 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

useEffect :  خوب حالا در داخل فانکشنال کامپوننت ها ما اگر لازم داشته باشیم که یک افکت رو در برنامه امون داشته باشیم باید از این هووک استفاده بکنیم و نحوه استفاده اشم به این شکل هستش که اون رو فراخوانی میکنیم  یک
تابع رو به اون میایم و پاس میدیم و هر زمانی که این  افکت ما بخاد اجرا بشه این لاجیک که در تابع اون قرار دادیم میاد و اجرا میشه در هر زمانی که یک تابع میاد و اصطلاحا رندر می شود میاد و دوباره اجرا میشه و همچنین در اولین
یا آرایه وابستگی ها رو میگیرد به dependency میاد و مجدد اجرا  می شود  که به عنوان پارامتر اول میاد و ساید افکت هامون رو میگیره و به عنوان پاارامتر دوم  هم میاد و useEffect  می شود Mount باری که کامپوننت امون میاد
useEffect(()=> { effect   return () => {   cleanup   } }, [ input ] )                                      هیچ عنوان این تابع رو به عنوان چرخه های حیات نباید در نظر بگیریم میتونیم شبیه سازی بکنیم ولی عینا شبیه به هم دیگه نیستند

نکته :  هنگامی که میایم و اون رو یک مقدار آرایه خالی می دهیم یعنی بیا و فقط دفعه اول اجرا بشود 

useEffect( ( ) => {    document.title = ` You clicked ${count} times  `   })    
   
قرار بدهیم و هر موقع که کامپوننت  ما  میاد و دوباره رندر میشه  این تابع میاد و اجرا میشه و هر دفعه  که برای ما  میاد و مقدار useEffect  هستند رو در داخل  sideEffect  نکته : همونطور که در بالا گفته شد تمام درخواست های ما  
امون تغیر میکند و این تابع عملا دوباره اجرا می شود state 

ما میشه یا هم یک تابعی میشه که در خارج از محیط state نکته : ما باید مقادیری رو قرار بدهیم که به ری اکت بگیم ما دقیقا به چه مقادیری نیاز داریم که زمانی که این تابع تغیر کرد بیاد و دوباره اجرا بشه حالا یا این میاد و همون
رو تغیر بدهد  useEffect اومدیم تعریف و استفاده کردیم و اون رو میخایم ازش  استفاده بکنیم برای مثال در داخل تابع زیر ما باید بیایم و مقدار ایمیل رو قرار بدهیم تا هرموقع که تغیر کرد بیاد و برای ما  تابع useEffect

چون خود ری اکت گفته تغیر نمیکنن لازم به نوشتن در آرایه  نیست و لازم نیست به عنوان پارامتر ورودی قرارشون بدهیم setState نکته : الان داخل این آرایه بهتره بیایم و اون استیت هایی که تغیر میکنه رو داخل اش قرار دهیم توابع 

میاد و انجام میشه یعنی زمانی که صفحه امون اپدیت میشه و کاربر خروجی امون رو  میبینه اجازه میده کد کامل اجرا بشه و خروجی کاربر ببینه و بعد کد اجرا بشه  async  به صورت  useEffect  خوب ما گفتیم که عملیات استفاده کردن از 

این هستش که بیایم و یک لاگین با استفاده از ایمیل رو انجام بدهیم  useEffect  مثال استفاده از  

query :   localhost:3001/user?email=emata137671@gmail.com

const [email, setEmail] = useState('')         const [error, setError] = useState()
  
    useEffect(() => {  setError(false)
        fetch(`http://localhost:3001/user?email=${email}`)
        .then(repsponse => repsponse.json())
        .then(user => {    if (user.length) {      setError(true)   }      })
          }, [email])
          
<input value={email} onChange={(e) => setEmail(e.target.value)} type="email" placeholder="info@mailaddress.com" />
{error && <p className='danger'>Email is taking</p>}             

خوب ما میخایم بیایم و اون اسلایدر مثال قبلی رو با این سناریو ببریم جلو که بیایم و تست کنیم که یک کالایی رو میخایم بخریم و یک پنل وارد کردن تعداد داریم و وقتی کاربر تعداد رو خواست مشخص بکنه بیایم و چک کنیم
که آیا میشه اون تعداد رو اومد و افزایش داد یا خیر 

برای شبیه سازی از توابع زمان استفاده میکنیم

می شود  ignore  وقتی که ما میایم و هنوز اون عملیات بروز رسانی انجام نشده و کلیک زیاد میکنیم تا موقعی که اون بروز رسانی انجام  نشه تغیرات ما صورت نمیگیرد و تمام تغیرات ما میاد و اصطلاحا 

حال اگر نیاز داشتیم که بیایم و از آخرین مقدار استفاده بکنیم  میتونیم کد بالا رو به شیوه زیر بیایم و تغیر اش بدهیم

unction increment() {
        setTimeout(()=>{ setCount(count + 1);    
            console.log(0)   } , 2000 )      }N

 function decrement() {
        setTimeout(()=>{  setCount(count - 1);
            console.log(0)    } , 2000 )    }

    useEffect( ( )=>{   console.log('effect')      })
 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    

cleanUp Function :اومدیم و استارت کردیم و میخایم که اون عملیات رو کنسل بکنیم میتونیم بیایم و یک تابع رو ریترن بکنیم و اون تابع اون عملیات که useEffect  میگه که هر موقع که ما نیاز داشتیم که یک عملیاتی رو در داخل 
میگویند که معمولا در موارد زیر میاد و اجرا می شود cleanUp Function  استارت زدیم رو کنسل بکنه برامون که به این تابع اصطلاحا 

1- در صورت اجرای مجدد تابع useEffect               2- شود unMount در صورتی که کامپوننت  

اون هارو بالا و پایین کنیم حالا برای همین مقداری که در  count  سناریو این مثال چی بود م در داخل تسک قبلی اومدیم و تایین کردیم که هر کدوم از  اسلاید هامون میتونن بیان و  ی سری تعداد ازشون سفارش بدیم و با استفاده از 
مینویسیم که در برگیرنده دو تا  ی قبلی است Buy امون بهش نیاز داریم و  باید از اون استفاده بکنیم برای همین میایم و درست کردنامون در داخل کامپوننت count هستش در کامپوننت  max  کامپوننت  
 
<Buy>
      <Max> 
      <Count> 

useEffect( ()=> {   
    fetch ( ` http:// localhost:3001/restricts?hero_id=${id}` )
    .then( responsive => responsive.json( ) )
    .then( restrict [0].max)
} )
} , [ id ]   استفاده بکنیم با هربار رندر دو نوبت برای ما اجرا میشه که برای رفع این موضوع از این راه حل استفاده میکنیم  dependency  اگر ما در این جا نیایم و از 

استفاده بکنیم فقط تنها نکته ای که هستش  هر موقع که از این تابع استفاده  میکنیم  باید setInterval حال ما نیاز داریم که بیایم  و این درخواست امون رو هر 2 ثانیه به سرور بفرستیم و اون رو چک کنیم برای این کار باید بیایم و از تابع 
بیایم و اون رو در مرحله بعدش پاک بکنیم

useEffect ( () => {  const fetchMax = setInterval(()=>{
    .then( responsive => responsive.json( ) )
    .then(setMax(restrict [0].max))
    },2000)
    return ()=> clearInterval(fetchMax)
},[id])

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
