/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

custom Hooks  : 

خوب نگاه کن ما وقتی میخاستیم بیایم و یک فیلد رو اصطلاحا در داخل برنامه امون ذخیره بکنیم در داخل کامپوننت امون معمولا میایم و به شیوه زیر  معمولا عمل میکردیم
که در این راه حل ما داشتیم از یک الگوی تکراری استفاده میکردیم که اصلا خوب و جایز نبود و میتونیم بیایم و اون رو تبدیل اش بکنیم به یک تابع که بیایم و ازش استفاده 
دیگه تعریف کنیم  و میتونیم با استفاده State  بکنیم دلیل این کارم این هستش که وقتی تعداد فیلد هامون میاد و افزایش  پیدا میکند دیگه لازم نیستش هی بیایم و یک 
از اون تابع همه ی این موارد رو هندل بکنیم

 شروع کنیم use  برای نوشتن اون ها بهتره بیایم و اسم هاشونو با 

export default function Form ( ) {

    const [ email , setEmail ] = useState( " " )
    const [ passsword , setpassword ] = useState( " " )

    return ( 
                   <form>
                         <div class="form-group">
                         <label  for="email"> Email address </label>
                         <input   value={email}  onChange={ ( e ) => setEmail ( e.target.value ) } name="email"   type="email"    class= "form-contol"    />                          
                         <div>              
                         <div class="form-group">
                         <label  for="password"> password </label>
                         <input   value={password}  onChange={ ( e ) => setpassword ( e.target.value ) } name="password"   type="password"    class= "form-contol"     />                          
                         <div>          

                         <button type="submit"  class = " btn  btn-info " />
                       
                   </form>
    )

}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 خوب برای حل این مشکل میایم و یک کامپوننت دیگه درست میکنیم و اون لاجیک امون رو در داخل اون قرار میدهیم

 export default  function useFormFilelds ( init ) { 

       const  [ filelds , setFileds ] = useState( init )

       function handleChangle ( e ) {
           const { target } = e ;
           setFileds ({   ...fileds  ,  [  target.name  ] : target.value }) تو در تو هستش destructuring  این کاری که الان کردیم اصطلاحا یک 
       }

       return {  fileds , handleChange  }

 }

/////////////////////////  خوب اصطلاحا این چیزی که در بالا ما اومدیم و نوشتیم رو بهش میگن کاستوم هووک یا هوووک های شخصی سازی شده 
ما در داخل کاستوم هووک ها میتونیم بیایم و از هر یک از هووک هایی که ری اکت در اختیار ما قرار میده رو استفاده بکنیم 

export default function Form ( ) {

    const { fileds , handleChange } = useFormFields( { email: "" , password : "" } )

    return ( 
                   <form>

                         <div class="form-group">
                         <label  for="email"> Email address </label>
                         <input   value={fileds.email}  onChange={ handleChange } name="email"   type="email"    class= "form-contol"    />                          
                         <div>              

                         <div class="form-group">
                         <label  for="password"> password </label>
                         <input   value={fileds.password}  onChange={ handleChange } name="password"   type="password"    class= "form-contol"     />                          
                         <div>          

                         <button type="submit"  class = " btn  btn-info " />
                       
                   </form>
    )

}

هامون نداریم ولی اگر نیاز داشتیم که از  state  خوب ما قبلا میتونستیم بیایم و یک سری توابع معمولی رو به وجود بیاریم و بعد از اون ها استفاده بکنیم که در داخل اون توابع دیگه دسترسی به 
هامون استفاده بکنیم میتونیم بیایم و از کاستوم هووک ها استفاده بکنیم میتونیم یک ریکوست سمت سرور بفرستیم و چن جا اون رو استفاده بکنیمstate

معرفی پکیج React Hook Form

نکته : موقع هایی که از کاستوم هووک ها استفاده میکنیم نیاز هستش که بیایم و از یکسری اطلاعات اضافه جهت باگ گرفتن نیاز داشته باشیم برای همین کار هم لازم هستش
استفاده بکنیم useDebugValue که بیایم و از یک هووک به نام 

useDebugValue( fileds ,  fileds => `  ${Object.keys(fileds).length } fileds `)

فراخوانی این تابع دقیقا مال زمانی هستش که ما میتونیم بیایم و از اون هووک امون استفاده بکنیم هستش و به غیر از اون دیگه فراخوانی نمیشه

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

طبق مستندات خود ری اکت ما در  3 تا جا بهتر هستش که بیایم و از کاستوم هووک ها استفاده نکنیم و این 

- conditions
- loop
- nested function

هر جا خواستین که بیاین و از یک هووک استفاده کنین بیاین و اون هارو در داخل کف کف کامپوننت ها تعریف کنید تا اون تریتیب اجرا رو برامون بهم نریزه

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
