/*

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

استفاده بکنیم  useState  در داخل ری اکت باید بیایم و از یکی از هوک های ری اکت به نام state برای استفاده از 

import React , { useState } from 'react';
 
دوتا روش داریم معمولا state برای تعریف و استفاده از 

1//  destructring روش اول با استفاده از 

count [count , setCount] = useState(0) 

2//  استفاده معمولی 

const countStateVariables = useState(0)
const count = countStateVariables[0]
const setCount =  countStateVariables[1]

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

چند نکته :

1- useState(0) : اون مقدار 0 که داده شده پارامتر یا مقدار دهی اولیه امون هستش 
  
2 - مجبور بودیم که بیایم و از آبجکت ها استفاده بکنیم ولی اینجا هیچ اجباری وجود نداره و میتونیم متناسب با نیاز امون هرچی رو که خواستیم state ما قبلا وقتی که از کلاس کامپوننت ها میومدیم و استفاده میکردیم برای  
جدید رو استفاده بکنیم state هامون داشتیم کافی فقط همون رو بیایم و دوباره تعریف کنیم و یک state  رو بیایم و بهش پاس بدهیم و اگر ما نیاز بیشتری به

3-  تغیر میکنه مقادیری که به تابع ست پاس داده میشود میاد و نمایش داده می شود state مقداری که ما به عنوان پارامتر ورودی میایم و پاس میدهیم فقط برای اولین بار میاد و استفاده می شود و دفعات بعدی که 

4- میومدیم و پاس میدادیم یک آبجکت هستش و این قابلیت وجود دارد  که اگر اون مقدار جدید که میدیم داخل امون وجود نداشته باشد مقدار موجود رو میاد و setState ما در داخل کلاس کامپوننت هامون مقداری که    
امون state  مرج میکنه و اضافه میکنه به استیت

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

بهتر هستش که در مواقعی که قراره عملیات تغیر استیت امون به صورت توابع باشه تا ما بیایم  و این شکلی انجام بشه در غیر این صورت یک باگ منطقی داریم async انجام عملیات های  

به طور معمول ما این طوری کد مینویسیم که برامون یک خطا دارد

function increment(){
  setTimeout(()=>{
    setCount(Count + 1)
    console.log(Count)
  },2000)
}

می شوند و اون مقادیری براش مهم هستند که در اون موقع تابع میاد و میگیره و دفعه اول که کلیک میکنیم  تا موقعی که اون نیاد و قرار capture دلیل این کار هم این هستش که در فانکشنال کامپوننت ها مقادیر ما اصطلاحا میان و 
نگیره انجام نمیشه و هر چقدر هم کلیک کنیم تا مقدار قبلی نیاد و جای نگیره انجام نمیشه و رندر مجددی صورت نمیگیره و هر چقدر هم بیایم و کلیک کنیم توسط ری اکت میاد و اصطلاحا ایگنور میشه

یک تابع رو پاس بدیم که بیاد و مقدار قبلی پاس بده و اینجوری دیگه منطقی مشکلی پیش نمیاد useState   برای حل این موضوع بهتر هستش که بیایم و در هنگام استفاده از

function increment(){
  setTimeout(()=>{
    setCount(prevCount => prevCount + 1)
    console.log(Count)
  },2000)
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const [ inputs , setInputs ] = useState({ name : ""  ,  email:"" , password : " " , } )

const handleChange = ( e ) => {
    setInputs((prevState) => ({   ... prevState , [e.target.name : e.target.value ] } ) )
}

MUI CODE

<TextField name = "name"  value = { inputs.name }  onChange={ handleChange }  type ={ " text " }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
