/*
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

چرا بهتر هستش که بیایم و از فانکشنال کامپوننت ها استفاده بکنیم

1- Resusing Logics :       که  Higher Order Component  رو پیشنهاد داد که مختصر کلمه  HOC  سخت بودن قابلیت استفاده مجدد که برای حل این موضوع و فعال کردن استفاده از کلاس کامپوننت ها ری اکت اومد و ساختار 
رو ایجاد بکنه که یک سری کامپوننت های تو در تو برامون ایجاد میکرد که نگه داری اون ها با بزرگ تر شدن کدهای پروژه Wrapper Hell  خود این قابلیت هم اگر میومدیم و بیش از حد ازش استفاده میکردیم میتونست برامون مشکل 
امون سخت تر می شد راه حل دوم ری اکت هم برای حل این موضوع استفاده  از پراپس ها بود

2- Highe Component : ها داشت میومد و استفاده از اون ها رو برامون زیاد میکرد و همین کار باعث شده بود که پیچیدگی کدهامون بالا بره و حتی تست نویسی رو هم برامون سخت تر بکنه lifeCycle به دلیل تعداد بالایی که در 

3- Confusing Classes : پیچیدگی کد رو بالا میبره و گیج کنند تر می شود هم برای ما و هم برای خود کامپیوتر ها مثل قابلیت هایی مثل همین پلاگین ری اکت در کروم

در این ها بیاد و حل بشه و برای همین تصمیم   API State  مشکل اصلی که 3 تا مشکل بالا رو میاد و در بر میگیره این هستش  که باید اون   

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1 - تفاوت سرعت دارد ولی آنچنان تفاوت قابل احساسی ندارد و مهم نحوه کد نویسی ما هستش و باید به صلاح  دید خودمون و پروژه استفاده بکنیم

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

بررسی مثال اسلایدر که در اون میومدیم و دو تا دکمه ی خرید که یکی با کلاس و دیگر با فانکشنال کامپوننت ها پیاده سازی شده است رو بررسی میکنیم ما دو تا دکمه داریم که یکی به صورت کلاس و دیگه دومی به صورت فانکشنال اومده
و پیاده سازی شده است و میخاهیم داخل اسلایدر رو هر کدوم که کلیک کرد بیاد و اون رو انتخاب و خرید کنه با یک لاگ  دو ثانیه ای


1- Functional Component : وقتی که ما میایم و دکمه بعدی رو کلیک میکنیم تا به اسلاید بعدی بره این تغیر باعث  میشه که پراپس ما  در داخل کامپوننت امون بیاد و تغیر بکنه و باعث میشه که تابع امون  دوباره رندر بشه و تابع دوباره 
ها هستش state Closure  می شوند و  داخل اون کامپوننت نگه داری می شوند و ما همیشه به مقادیر گذشته اون ها دسترسی داریم دلیل اون هم مبحث capture هامون state و props اجرا بشه در داخل فانکشن کامپوننت ها   


export default function BuyFunction ( { hero } ) {
     showAlert ( ) {  alert( hero.name )    }
     handleClick ( ) {  setTimeout( showAlert  ,  2000 )
     return ( 
               <div>
               <span className='badge' onClick= { this.handleClick }> Buy </span>
               <p>class</p>
               </div>
               )  }
          
2 - Class Component :  استفاده میکنیم این کلمه میاد و همیشه  به  this  امون بیاد و تغیر بکنه و چون برای استفاده از اون میایم و از  state  در این جا موقعی که ما میایم و از اسلاید امون جا به جا می شیم باعث میشه که اون پراپس و  
آخرین رندرمون اشاره میکنه و همیشه مقدار فعلی و آخرین رو به ما تحویل میدهد

export default class BuyClass extends Component {
   constructor( props ) {
       super(props)
       this.showAlert = this.showAlert.bind(this)
       this.handleClick = this.handleClick.bind(this)   }

   showAlert ( ) {  alert(this.props.name)  }
   handleClick ( ) { setTimeout(this.showAlert , 2000 )  }
       
    render ( ) {
        return (
            <div>
                <span className='badge' onClick= { this.handleClick }> Buy </span>
                <p>class</p>
            </div>
        ) }  }
    
نکته : ما باید نوع نگاهمون به کلاس  و  فانکشنال کامپوننت هامون متفاوت باشه

کنیم باید چکار کنیم  در داخل کلاس کامپوننت ها برای حل این موضوع چند تا راه حل وجود داره در ابتدا این هستش که بیایم و توابع capture رو بیایم و اصطلاحا  state و props حا اگر ما نیاز داشتیم که بیایم و اون مقادیر 
بالا رو تغیر بدهیم

// راه حل 1
showAlert(name) { alert ( name)    }
handleClick ( ) {   const {name} = this.props    setTimeout ( this.showAlert ( name ) , 2000 )    }
      
// راه حل 2

    render() {
    const {name} = this.props

     showAlert(name) {
       alert(name) }

     showAlert() {
       setTimeout(showAlert(name) , 2000 ) }   

        return (
            <div>
                <span className='badge' onClick= { this.handleClick }> Buy </span>
                <p>class</p>
            </div>
        )
    }
}

setCar({...state , color : "blue"})
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------









*/
