/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Memozation : یک تکنیک هستش که در علوم کامپیوتر کاربرد دارد و موقعی که میخان بیان و پرفورمنس برنامه رو افزایش بدن از این تکنیک میان و استفاده میکنند فرض کنید که یک تابع رو داریم که زمانی 
ها هم هستش و اون تابعی که ما داریم باید بیاد صطلاحا pure function که یکسری پارامتر یکسان رو میایم و به اون پاس میدهیم یک سری خروجی یکسان رو برای ما تولید بکنه که البته این یکی از  ویژگی های 
باشه pure  

فرض کنید عملیاتی که در داخل تابع امون در حال انجام شدن هستش زمان بر هستش زمانی که ما پارامتر یکسانی رو اومدیم و به اون پاس دادیم به جای اجرای بدنه تابع آخرین مقدار ذخیره بکنیم  و همون نتیجه
که میتونیم از اون ها استفاده React.Memo میدهیم هم داریم به نام HOC همچنین یک useCallBack  و useMemo  رو بیایم و برگشت بدیم حال برای استفاده از این قابلیت ما یکسری هوک داریم به نام های 
 بکنیم 
 
شروط استفاده از این ویژگی جدید

1-   در عملیاتی که میایم و ازش استفاده میکنیم واقعا بیاد و زمان بر باشد
2-   باشد pure function  تابعی که داریم میایم و ازش استفاده میکنیم و به عنوان پارامتر اول بهش میدهیم باید  به صورت 
3-   موقعی که از این ویژگی استفاده میکنیم به هیچ عنوان روند اجرای برنامه نباید بیاد و تغیر بکنه

useMemo ( function ,  dependence Array همون  []  )  //  useMemo ( ( ) => { } ,  [ ] )

dependence Array : ما هر آنچه رو که در داخل این قسمت قرار میدهیم اگر تغیر نکنه مقدار خروجی میاد و مقدار قبلی رو به ما نمایش میدهد یعنی زمانی که تغیر نکنه  اون تابع رو برای ما اجرا نمیکنه و مقدار
قبلی اون تابع رو برای ما بر میگردونه
 
useEffect ما تغیر نمیکرد اون تابع مربوط به dependence Array  مقدار useEffect ها استفاده میکردیم هم داشتیم موقعی که در داخل useEffect  خوب یک سوال ما همچین مفهومی رو موقعی که داشتیم از 
امون هم اجرا نمی شد ولی اینجا وقتی تغیر نمیکنه مقدار قبلی رو میاد و برگشت میده و فقط بدنه تابع رو مجدد اجرا نمیکنه    

خوب در اینجا ما چن تا از استفاده های نادرست از این مفهوم رو میریم

function App( ) {

    const [counter1, setCounter1] = useState(0);       const [counter2, setCounter2] = useState(0);
   
    let randomNumber = useMemo(() => Math.random() * counter1, [counter1]);     

نیستش و هر دفعه یک عدد تصادفی رو ایجاد میکنه pure function خوب اولین خطای ما اینه که تابعی که اومدیم و بهشون پاس دادیم اصطلاحا 
همچنین این تابع اومده و روند اجرای برنامه ما رو به  خودش وابسته کرده که این کار هم ایراد دومون هستش و ما نباید لاجیک امون رو وابسته بکنیم

 1 تکه کد

    return (
        <div>
            <p>Random Number is : {randomNumber}</p>
            <p>Click count1 : {counter1}</p>
            <p>Click count2 : {counter2}</p>
            <div>
                <button onClick={() => setCounter1((c) => c + 1)}>
                    Increament1
                </button>
                <button onClick={() => setCounter1((c) => c - 1)}>
                    Descrase1
                </button>
            </div>
            <div>
                <button onClick={() => setCounter2((c) => c + 1)}>
                    Increament2
                </button>
                <button onClick={() => setCounter2((c) => c - 1)}>
                    Descrase2
                </button>
            </div>
        </div>
    );
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

حال اگر بخایم و بیایم و یک عملیات زمان بر رو شبیه سازی بکنیم

function wordCounte(word) {
        let i = 0;
        do {
            i++;
        } while (i < 99999999);
        return word.length;
    }
                                                       
const count =  useMemo(()=>wordCounte("js") , [ ])

<p>Word Count : count </p>

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
