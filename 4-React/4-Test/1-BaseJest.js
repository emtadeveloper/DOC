/*
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
===================================================================================================================================

yarn  init -y         //       yarn add --dev  jest        رو در داخل پروژه امون نصب اش میکنیم jest در ابتدا میایم و 

همچنین برای استفاده بهتر اون در داخل فایل پکیج جی سون امون بهتر هستش که بیایم و خطوط کد زیر رو اضافه کنیم

"scripts"  : {  " test " : " jest ",  " testw " : " jest --watch " , " testc " :  " jest --coverage "  } 

 در اختیار ما قرار میده در وهله ی اولش یک تابع هستش که میاد و تست هامون رو در اون جا بنویسیم و مدیریت اشون کنیم jest امکاناتی که 

test : به عنوان پارامتر اول میاد و توضیحات امون رو میگیره و به عنوان پارامتر دوم هم یک تابع که اجرای تست امون رو در اون جا قرار میدهیم و داخل اون هم یک متد داریم به نام
رو برای ما انجام می دهد Assertion که به معنی انتظار داشتن هستش که انتطار دارم که این تابع فلان کار رو بیاد و انجام بده که اصطلاحا کار expect

test ( description , callBackFunction )

it : مثل بالایی هستش و خروجی یکسانی رو برای ما تولید میکنند و تفاوتی با بالایی ندارند

===================================================================================================================================
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//  sum.js

function sum ( a , b ) {  return  a   +  b   }           module.exports = sum

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//   sum.test.js

const { expect } =  require("@jest/globals")
const sum =  require("./sum")

test( " sum two  numbers " , ( ) => {
    const  result = sum( 1 ,  2)
    expect (result) . toBe(3)
})

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
===================================================================================================================================

Using Matchers  

1. toBe :  دقیقا مقدار باید بیاد و برابر با فلان بشه که در بالا یک نمونه اش رو دیدیم  

2 . not : یعنی انتظار داریم که این مقدار نباشد 

3. test("null" , ()=> {
     const n = null ;
     expect(n).toBeNull( ) 
     expect(n).toBeDefined( )
     expect(n).not.toBeUndefined( )  نباشد Undefined  انتظار داریم که این مقدار 
     expect(n).not.toBeTruthy( )   نباشد  Truthy  این عبارت به صورت 
     expect(n).toBeFalsy( ) نباشد  falsy  این عبارت به صورت 
}

4. برای اعداد هم میتونیم بیایم و از حالت های زیر اش استفاده بکنیم

test ( " two plus two " , ()=>  { 
    const value = 2 + 2;
    expect(value) . toBeGreaterThan(3)  بزرگ نر از مقدار 3
    expect(value) . toBeGreaterThanOrEqual(3.5)  بزرگ تر یا مساوی 3.5
    expect(value) . toBeLessThan(5)  کمتر از 5 باشه
    expect(value) . toBeLessThanOrEqual(3)  کمتر یا مساوی 5 باشه
} )

5- toBeInTheDocument برای چک کردن یک همچین چیزی که آیا در داخل صفحه و سند ما هستش یا خیر می تونیم بیایم و استفاده بکنیم

expect(screen.getByRole("heading", { name: /fruit form/i })).toBeInTheDocument();

    expect(screen.getByRole("button", { name: /submit/i })).toBeEnabled();
    
===================================================================================================================================
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
