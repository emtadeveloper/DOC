/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

یکی از خوبی ها و یا شاید بدی های ری اکت این هستش که هیچ گونه اجباری برای ساختار در درست کردن پروژه ها در اون وجود ندارد خوب ما میایم  و چند تا از این ساختار هایی که خوب هستش رو بررسی میکنیم

نکته  :   تا جای ممکن از ایجاد کردن پوشه های تو در تو در داخل پروژه امون  اجتناب بکنید  و خیلی این پوشه ها نباید تو در تو باشه و حداقل  به صورت ماکسیم 4 تا قابل قبوله ولی بیشتر از اون نه

اولین مدل  ساختار این هستش که ما بیایم و فایل هامون رو بر اساس نوع اشون جدا بکنیم 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

components :  card ( index.js  card.jsx  style.css )  /  Menu  چیزهایی قرار میدهیم که قابلیت استفاده مجدد رو داشته باشه در این جا قرار میدهیم
     
layout  :   Footer  /  Header  /  Main داخل این پوشه معمولا افراد میان و  یک الگوی کلی  درست میکنیم که در داخل پیج هامون بیایم و استفاده بکنیم 

            export deafult  function Layout ( {  children } ) {     return (   <>    <Nav />  <Main >    {children}   <Main />   <Footer />   </>      )   }

pages  : Dashboard / HomePage / Login وقتی برنامه امون رو استارت میزنیم معمولا یکسری صفحات برای ما دارد  و برای هر قسمت سایت امون یک صفحه درست میکنیم

            export deafult function HomePage ( ) {   return (   <Layout>  HomePage   </Layout> )    }

servises  :  axsios  ..  cookie  ...  localStorage  بهتره بیایم و درخواست های به سمت سرور امون رو در اینجا بنویسیم

===============================================================================================================================================================

پوشه های فرعی

__tests__  : پوشه های مربوط به تست نویسی امون هستش البته ما میتونیم بیایم و تست هامون رو کنار هر کامپوننت هم بنویسیم

utils  :  رو داریم HOC  custom component در این فولدر که معمولا از جنس کامپوننت هستند یک سری کامپوننت مثل 

helper :   در داخل این پوشه ها یکسری توابع که خیلی نیاز داریم ولی جز سرویس ها و یا کامپوننت هامون نیستند مثل تبدیل یک عدد یا یک تابعی که چند جا هستش 

style / theme  :  بیایم و قرارشون بدهیم  theme  برای نوشتن استایل هامون حالا چه به صورت سراسری که استایل های گلوبال امون رو در داخل 

redux  // route  :  فایل ها و مطالب مربوط به مسیر ها و ریداکس امون هم در پوشه ی خودش درست میکنیم

Template  : و در داخل این پوشه میان و یکسری استایل که به صورت گلوبال هستنش رو قرار میدهند

api :  اگر در داخل پروژه امون بک اند داشتیم بهتر هستش که فایل های مربوط به اون رو اینجا قرار بدیم

constants  :  پوشه ای که موارد ثابت رو مثل ارایه ها یا ابجکت هایی که در همه جای برنامه داریم رو در این پوشه قرارشون میدیم

containers  : شبیه به پوشه کامپوننت هامون هستند ولی میشه گفت تشکیل شده از چند کامپوننت هستش و صفحات رو یک جورایی تشکیل میدهند

lang : برای دو زبانه بودن سایت امون و اگه پکیجی چیزی داشتیم در این پوشه قرار میدهیم 

redux : types و action و  reducer معمولا شامل مواردی مثل

===============================================================================================================================================================

"devDependencies": {
    "concurrently": "^5.3.0",
    "json-server": "^0.16.2"
},

"scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "json-server": "json-server --watch ./mock-api/db.json --port 5000",
    "dev": "concurrently \"npm start\" \"npm run json-server\""
},

npm run dev   پکیج های بالا نصب کنیم میتونیم هم زمان هم جیسون سرور و هم  پروژه رو باهم دیگه استارت بزنیم

===============================================================================================================================================================

public :  رو داخلش میبینیم  div.root  هستش که اگه بیایم و اون رو بررسی کنیم تگ  index.html  پوشه ای هستش که در نهایت این کاربر ما میتونه بیاد و اون رو مشاهده بکنه که قسمت مهم اش که بخایم بگیم همون فایل 
میشه append که قبلا باهاش کار کردیم و همه ی فایل هامون میاد و به اون اصطلاحا 

index.js :  که کارش اینه یکسری جاها اگر پیغام خطایی باشه React.StricMode  میاد و عمل رندر کردنمون در اینجا اتفاق میوفته در این فایل یک قسمت هستش که کامپوننت ما میاد و در   داخل اون قرار میگیره و اون هم قسمت      
ارورر مناسبی رو برامون تولید میکنه

app.test.js : برای تست نویسی به دردمون میخوره 

serviceWorker.js : هستش PWA مربوط به مبحث 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
