/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

React lifecycle methods :   کامپوننت ها دارای چندین چرخه ی حیات هستند که میتونیم در زمان های ویژه و مخصوصی این روند اجرا و پروسس رو بیایم و تغیرشون بدهیم مثلا جلوی بروز رسانی اون رو بگیریم و این چرخه های حیات
  فقط در کلاس   کامپوننت ها در اختیار ما هستند ما به طور کلی 4 چرخه ی حیات مهم داریم

1-Mounting (    شروع و تولد   )    2-Updating  (   آپدیت و بیمار شدن   )     3- Unmounting (   مرگ و نابودی   )   4-Error Handing  (    به مشکل خوردن    )

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

componentWillUnmount :  ما  componentDidmount یک کامپوننت میاد و اجرا میشه و قبل از نابودی کامپوننت امون این متد اجرا میشه  خوب همون طور که قبلا گفته شد در داخل متد  Unmounting  تنها متدی هستش که در چرخه 
میتونیم بایم و یکسری عملیات رو استارت بزنیم و شروع کنیم برای مثال ما در این متد میخایم هر چن ثانیه یک درخواست به سمت سرور بفرستیم حالا موقعی که کارمون با این کامپوننت تموم شد باید بیایم و این عملیات رو یکجایی متوقف بکنیم
استفاده بکنیم چون کامپوننت ما میاد و به کل نابود میشه و از بین میره  setState هستش ما در داخل این متد اصلا اجازه نداریم که بیایم و از تابع  cleanUp تا پرفورمنس برنامه ما بیاد و حفظ بشه این متد اصطلاحا یک متد

نکته : در کل ما از این کامپوننت موقعی میایم و استفاده میکنیم  که بخاهیم اصطلاحا عملیاتی رو متوقف بکنیم  در داخل این چرخه یا متد قرار می دهیم

constructor(props) {    super(props); this.state = {   time: new Date().toLocaleTimeString()    }       }
         
componentDidMount() {  this.timer = setInterval( ( ) => {    this.setState({   time: new Date().toLocaleTimeString ( )   })
                                                                                                  console.log(new Date().toLocaleTimeString());    }, 1000  ) }
componentWillUnmount( ) {     clearInterval(this.timer);     }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CreateRef : ها ندارند و امکانی هستش که درlifecycle هستش و جزو قابلیت های ری اکت هستش و ربطی به  componentDidMount  و  ComponentDidUpdate  ری اکت دقیقا قبل از عملیات های   lifecycle  جایگاهشون داخل 
کلاس کامپوننت ها در  اختیار ما هستش

امون رو کلیک بکنه برای حل این موضوع به خود المنت باید دسترسی داشته باشیم که قبلا با جی اس input رو در نظر بگیر که میخایم یک دکمه کنارش بزاریم که وقتی روش کلیک شد به صورت خودکار بیاد و text input مثال استفاده بیاین و یک 
استفاده بکنیم و اون المان امون رو انتخاب کنیم و بعد اون تابع فوکوس اشونو فراخوانی کنیم getElements و querySelector خام میتونستیم  بیایم و از 
   
 this.textInput  = React.createRef ( ) هستش  null که مقدار اولیه اش current زمانی که این تابع فراخانی میشه یک مقداری داخل خودش داره به نام 

ref={ this.textInput }رو مقدار دهی اش بکنی  current با استفاده از این کار هم میتونیم بیایم و مقدار

class CustomTextInput extends React.Component {
    
 Constructor(props) {  super(props)  this.textInput = React.createRef()    }  }

 focusTextInput =( )=> {    this.textInput.current.focus()    //  current  رو بهش دادیم میاد و مقدار اینپوت امون رو میگیره createRef چون مقدار  }

render ( ) {  return(   <div>  <input type="text"   ref={ this.textInput } />     <input type="button" value="Focus text input"   onClick = {this.focusTextInput}  />           </div>  )   }  

=================================================================================================================================================================

استفاده بکنیم  که یک خورده دست ما باز ترهcallBack Ref  استفاده نکنیم میتونیم بیایم و از روش پایینی  یا اصطلاحا  createRef  خوب حالا اگر ما در داخل کدهامون میخاستیم بیایم و از روش بالایی و 
  
class CustomTextInput extends React.Component { 
    
    Constructor (props ) {   super(props)
           this.setTextInputRef = element => {  this.textInput = element }
          this.focusTextInput ( ) => {   if( this.textInput ) this.textInput.focus()
                     } ;
                 };

render ( ) {  
         return( 
                         < >        <input type="text"   ref={this.setTextInputRef} /> 
                                      <input type="button" value="Focus text input"   onClick = {this.focusTextInput}  />   
                         </>    ) }
        
Ref کاربرد های استفاده از  

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------                
*/
