/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

برای درست کردن آیدی های تصادفی shortId استفاده کردن از پکیج 

unction List() {
    const [items, setItems] = useState([])
    return (
        <div>
            <input    type="button"   value="Add Item"   onClick={e => {   setItems(items => [shortid.generate(), ...items])    }}    />
            <hr />
            <div className="lists">

                <ul>  <label className="title">{`key = { index }`}</label>
                       { items.map((id, index) => (     <Item name={id} />      ))}   </ul>
                 
key={index}  موقعی که ما میایم و یک لیست رو رندر میکنیم  خود ری اکت میاد و به صورت پیش فرض از ایندکس ها استفاده میکنه برای آیتم هاش و وقتی که ما میایم و از مقدار 
استفاده میکنیم هیچ کار خاصی نکردیم و فقط اومدیم و اون هشدار ری اکت رو برطرف کردیم   
      
هامون دسترسی داشته باشیم و بتونیم بیایم و اون هارو فراخوانی کنیم state ما با استفاده از کلید ها میتونیم بیایم و به کامپوننت هامون و در نتیجه اون 

هامون منتقل نمیشه به کلید state  نکته  :  خوب در توضیح این مسئله و مثالی که زده شده می بینیم که وقتی میایم و برنامه رو اجرا میکنیم کلید هامون میاد  و  پایین قرار میگیره ولی اون 
 مربوط اش  و میاد و در کلید جدیدی که ساخته شده قرار میگیره دلیل اش هم استفاده از ایندکس ها به عنوان کلید هستش چون ما وقتی میایم و یک مقدار جدید رو برای لیست امون درست
هی میان و تغیر میکنن و به یک مقدار دیگه    state رو بگیره در نتیجه این مقادیر  key = 0   میکنیم باعث میشیم که مقادیر ایندکس به طور کلی تغیر کنن و یک کامپوننت دیگه مثلا بیاد و  
وصل میشن حالا به خاطر این سری مسائل کلن میگن بهتر هستش که بیاین و از ایندکس ها برای کلید استفاده نکنید اصلا

                <ul>    <label className="title">{`key = { Math.random() }`}</label>
                        {items.map(id => (     <Item key={Math.random()} name={id} />    ))}      </ul>
              
نکته : ما بهتر موقعی بیایم و از ایندکس برای کلید ها استفاده بکنیم که نتونیم به هیچ روش یک شناسه  منحصر به فردی رو ایجاد بکنیم و دوم اینکه اون لیست نباید بیاید و یک مقدار جدید
بهش اضافه بشه و ترتیب ایتم هامون و مقادیر یشون نباید بیاد و تغیر بکنه و یا اضافه بشه

امون رو پاک میکنه دلیلشم این   state  نکته : ما به هیچ عنوان نباید بیایم و از یک عدد تصادفی که میاد و هر دفعه تولید میشه استفاده  بکنیم دلیل اش هم این هستش که میاد و مقادیر 
هست که این مقادیر اصلا جایی ذخیره نمی شوند که بیاد و کاری برامون بکنه 
       
                <ul>  <label className="title">{`key = { uniqueValue }`}</label>
                        {items.map(id => (    <Item key={`${id}`} name={id} />     ))}     </ul>
            </div>
        </div>

    );
}

export default List;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

نکته : هدف ری اکت از استفاده از  کلید ها یک افزایش میزان پرفورمنس و همچنین پیدا کردن راحت کامپوننت ها بوده است

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
