/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DOM :  رو به عنوان یک ساختار درختی برامون در نظر میگیرد xml و html  هستش که میاد و سند های Api cross-platform or lanquage-independent interface یک
و میاد برای هریک از این نود های ساختار درختی مون یک آبجکت رو قرار میدهد و ما میتونیم با اون ها ارتباط بر قرار کنیم و تغیرات امون رو اعمال بکنیم  و مخفف کلمه
به این شکل هستش که  یک تگ ما یا المنت امون میاد و تغیر میکنه کل صفحه  و المنت هامون میاد و تغیر Real DOM هستش که شیوه عملکرد   Document Object Model 
ایجاد میکنن و این باعث میشه که اگر تعداد رندر های ما بالا بره سرعت لود و اجرای صفحه بیاد و پایین قرار بگیره که برای رفع این موضوع از ری اکت استفاده میکنیم و راهکار اون

interface : رابط بین دو تا مفهوم هستش

Api cross-platform : هیچ گونه وابستگی به سخت افزار یا نرم افزار و یا زبان برنامه نویسی ندارد و در همه زبان های برنامه نویسی همچین چیزی هستش

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

رو انجام بدهیم یعنی مثلا کاربر بیاد و فلان المان ما  state  موقعی که کتابخونه های بزرگی مثل ری اکت به وجود  اومدند یک مشکلی  که داشتیم  این بود که  چگونه بیایم و ما مدیریت 
امون UI رو مشاهده بکنه یا نکنه خوب حالا زمانی که ما این داده  هامون بیاد و زیاد بشه مدیریت کردن اون ها واقعا  سخت میشه و نمیشه  بیایم و به خاطر تغیر  یک المان کل  صفحه و
رو تغیر بدهیم این کار باعث میشه میزان  پرفورمنس برنامه بیاد پایین شدیدا خوب ما قبلا میومدیم و به شیوه زیر کد میزدیم و این مدلی باعث میشد که بعد از تغیرات امون دوباره صفحه
دوباره ساخته بشه  state امون بیاد و مجدد رندر بشه 

    .body { background-color: #007ebc;    color: #ffff;    }
      
    .box {   text-align: center;     border: 3px  solid #ffffff;    }
        
    const element = document.createElement('div')
    element.classList.add('box')
    let count = 0;
    element.innerText = count
    document.body.appendChild(element)
    setInterval ( ( )=>{   count++     const length = (100 + count) + 'px'
            element.style.width = length  element.style.height = length
            element.style.lineHeight = length   element.innerText = count
        },1000)
       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   
        
 اش بکنیم replace  جدید رو درست بکنیم و اون رو کلن بیایم و  DOM خوب حالا راه حل چیه به ما گفتن آقا بیاین و همون عملیات رفرش شدن صفحه امون رو شبیه سازی بکنیم  و یک      
موجود امون و حتی اسکرول صفحه امون میاد و از بین میره و حتی  state  امون که این کار یکسری ضعف ها داشت که اگر قرار باشه ما بیاییم و همچین کاری رو بکنیم اون  DOM  با کل
امون رو بریزیم دور عملیات مون کند میشه و پرفورمنس امون میاد و پایین  DOM  اگر قرار باشه که ما بیایم و با هر تغیری کل


رو در داخل ری اکت پیاده  سازی  میکنیم  خوب ما هدف  امون  این بود که وقتی یک کلیک اومد وانجام  Virtual DOM   استفاده میکنیم به نام  concept  حال ما میایم و از یک مفهوم و یا یک    
بنویسیم بلکه  html  امون رو تغیر بدیم  حالا کاری که ما انجام می دیم این نیستش که بیایم و کد  DOM  جدید امون فقط همون  قسمت اش رو تغیر بدیم و مجبور نباشیم کل  UI  شد ما بیایم و 
باید بیایم و با آبجکت های جاوااسکریپت المان های صفحه امون رو توصیف اشون بکنیم  یعنی بگیم ایا این  دکمه  فعال هستش یا نه و این کار  با استفاده از جاوااسکریپت انجام بدهیم و میایم و
ما ساخته شد ولی هیچ رابطه ای با Virtual DOM  یک سیستم درختی درست میکنیم و به جای هرکدوم از اون نود هامون یک سری آبجکت  میایم و قرار میدهیم  خوب تای اینجاDOM  مشابه  
استفاده بکنیم  ReactDOM  امون رو باهم دیگه بیاد و سینک بکنه   پس نیاز داریم که از کتابخونه DOM  و   Virtual DOM  واقعی ما نداره  پس ما به یک پکیج نیاز داریم که بیاید و این  DOM 
که اومدیم  و درست کردیم  اون کار هایی که ما لازم داریم رو میاد و در 3 مرحله انجام میدهد Virtual DOM   تا کاربر بتونه اون خروجی ما رو مشاهده بکنه  حال این 
 
1- هر زمان که داده های اساسی میاد و تغیر میکنه کل رابط کاربری توسط دام مجازی مجددا رندر میشود

2- قبلی و جدید میاد و محاسبه می شود  DOM تفاوت بین 

3-  واقعی فقط با مواردی که واقعا تغیر کردن به روز میشه DOM بعد از انجام محاسبات 


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
