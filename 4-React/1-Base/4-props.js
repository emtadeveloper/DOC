/*
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Props :  یک پارامتر هستش که میاد و به صورت پیش فرض  یک شی رو بین کامپوننت های ما میاد و رد بدل می شه و ما در هنگامی که بیایم و هر نوع صفت یا ویژگی  که بیایم و براش درست 
کنیم میاد و اون رو به عنوان مقادیر ورودی یا اصطلاحا پراپس ذخیره میکنه

function Hello ( props ) { return <div>  <div> hello { props.name }  { props.last } </div> }

ReactDOM.render( < Hello name="mojtaba"  last="soori" >, document.getElementById( 'root' ))                

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

هستش که علاوه بر پاس دادن یکسری ویژگی یا صفت که به  صورت آبجکت jsx هامون باید یک نکته رو در نظر داشته باشیم و اون هم استفاده از فرزند ها  props  نکته : ما در هنگام استفاده از 
ارسال رو برامون میکند jsx استفاده بکنیم که میاد و تگ های  props.children   هم استفاده بکنیم که از اون ها میتونیم بیایم و در غالب jsx هستند میتونیم بیایم و از فرزندان 
 
function Hello ( props ) {     return <div>  <div> hello {props.name}  {props.last} </div>   {  props.children  }    </div>      }           
    
const element = <Hello name="emad" last="ta" >    <div> greeting </div>     </Hello>          

ReactDOM.render(element,document.getElementById('root'))                

Props is ReadOnly No Change نکته : در هنگام استفاده از پراپس ها از والد به فرزند میتونیم بیایم و ارث بری داشته باشیم ولی از فرزند به والد خیر همچنین

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

List Rendering :

const notesData = [   {title:"Tile 1",content:"Text content #1"},    {title:"Tile 2",content:"Text content #2"},   {title:"Tile 3",content:"Text content #3"} ]

const notes = noteData.map((note,index)=>{   <Note key={index}  title={note.title}   content={note.content} /> })
   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Conditional Rendering : 

if    ( expression )  { component }   else { component }

expression   &&  component                 expressin  ?  <Login/>  :  <LogOut/>
 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Props drilling :   به انتقال والد و فرزندی  پراپس هامون میگویند که از والد به فرزند منتقل می شود حال به عنوان توضیح کامل تر در نظر بگیرید که میخاهیم بیایم و یک کامپونت والدی که یک 
درون خودش داره رو تغیر بدهیم برای این کار باید بیایم و این سیل تغیر دادن رو با استفاده از پراپس های فرزند به سمت والد اون مقدار رو ارسال کنیم تا بتونیم تغیر ایجاد بکنیم که اصطلاحا  state  
میگوییم state Lifting Up   به اون

به تصویری که پیوست شده حتما نگاه کن

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 عمل بکنه و اون هارو تغیر نده و متناسب با ورودی های مشخص Pure هاش بیاد و به صورت Props داریم یک کامپوننت باید به نسبت به  Pure و imPure  ما دو تا مفهوم با نام های 
 خروجی های ثابتی رو تولید بکنه

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

استفاده بکنیم که برای این مرحله بهتر هستش که از کلید ها استفاده کنیم و بهتره برای  map بیشترین استفاده از کلید ها در ری اکت برای موقعی هستش که ما بخایم بیایم و از حلقه ها مثل
میتونه باعث این بشه که ترتیب قرار گیری المان هامون تغیر  بکنه index استفاده بکنیم چون استفاده از index کلید ها از آیدی های یونیک امون استفاده کنیم و به عنوان آخرین راه بیایم و از 

ما ممکنه بیایم و در یک حلقه از یک کامپوننت استفاده بکنیم و مجبور شیم که بیایم و به اون یک کلید رو پاس بدیم که این پاس دادن کلید صرفا به عنوان یک راهنما برای کامپوننت استفاده 
به اون دسترسی داشته باشیم props.key میشه و نمیتونیم با استفاده از 

const content = posts.map((post) =>   <Post    key={post.id}    id={post.id}    title={post.title}   />  );

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 */
