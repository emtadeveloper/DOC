/*
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

state : دومی هم استفاده از props همین طور که قبلا گفته شد ما  برای اینکه بیایم و کامپوننت هامون رو اصطلاحا به روز رسانی بکنیم یا رندرشون بکنیم دوتا راه حل داشتیم اولی استفاده از
ها متغیر هایی هستند که در داخل کامپوننت ها ایجاد و مدیریت می شوند state هستش حال این state 

rerendering Component : 

1 - change Props  پراپسی که به اون پاس داده شده بیاد و تغیر بکنه
2 -  change state استفاده از استیت ها که تغیر دادن اون باعث به روز رسانی و تغیر دادنش میشه

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

در داخل کلاس کامپوننت هامون دو تا راه حل داریم  state  ما برای تعریف کردن  

1 -  state = { }            2 - constructor ( props ){  super ( props )  this.state = { }   }

استفاده بکنیم  که شیوه استفاده از ان هم به دو صورت هستشsetState هم میتونیم بیایم و از تابع state همچنین برای تغیر دادن    
 
1 - object  :  this.setState({     agoState : nextState })

2 - function  : this.setState( ( state , props) => agoState : agoState + nextState ) )

میان و اجرا می شوند setState  بیایم و استفاده بکنیم 
به این شکل که بلافاصله بعد از  callBack  از توابع setState  ما میتونیم بیایم و بعد از عمل 

به عنوان پارامتر دوم میاد یک تابع رو میگیره به عنوان کال بک که وقتی که استیت ما  اومد و عوض شد اون رو برامون اجرا میکنه  و هر هرکی که انجام بشه کامپوننت ما قراره setState تابع 
بشه  Mount  بشه و بعد از اون بیاد و   unMount 

setState({ name: "John" }, () => console.log("component re-rendered"));

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

حق نداریم که اون رو مستقیما بیایم و  تغیرش بدهیم و بهتر  هستش که بیایم  و یک کپی  ازش بگیریم و بعد بیایم و اون کپی رو  تغیرش  بدهیم همچنین state  نکته : ما برای تغیر دادن     
به صورت مستقیم بیایم و آپدیت اش بکنیم عمل ری رندر شدن انجام  state  کمتری داشته باشند  مدیریت کردنشون بهتر هستش همچنین ما اگر  state  کامپوننت های ما هرچه قدر که 
نمیگیرد
        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

میگوییم  stateless استفاده نمیکنیم اصطلاحا    state  و به کامپوننت هایی که درون  آن ها از statefull استفاده بکنیم  state نکته : به کامپوننت هایی که درون آن ها میتونیم بیایم و از 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

تو تابع زیری که ما اومدیم و نوشتیم چند تا نکته رو مدنظر داشتیم 

1-  تغیر ایجاد نکردیم و اومدیم و اون رو به صورت  غیر مستقیم و با استفاده از کپی تغیرش دادیم state ما در ابتدا به طور مستقیم روی 

2 -  اون توابع امون setState دیگه چک و بعد اون رو حذف و یا اضافه کردیم و در نهایت میتونیم با استفاده از state با استفاده از یک شرط و یک سری توابع اون مقداری که میخایم در یک 
امون رو حذف کردیم state تغیر میکنه و 

handleToggleButton ( id ) {
        const activeBoxes = [...this.state.activeBoxes];
        if (activeBoxes.includes(id)) {    activeBoxes.splice(activeBoxes.indexOf(id),  1 );
          
        } else {
            activeBoxes.push(id);
        }
        this.setState((state) => {
            return { ...state, activeBoxes };
        });
    }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

کمتری داشته باشند همچنین ما میتونیم بیایم و با استفاده از نوشتن توابع امون به صورت فلش state نکته : سعی کنید بیاید و کامپوننت هایی درست کنید که در وهله ی اول مقدار
دار اون هارو از نوشتن به صورت  بایندینگ در موقعی که لازم باشه به صورت پراپس ارسال کنیم  بی نیاز بکنیم

handleToggleButton (id)=> {}    <SliderBox   handleToggleButton={this.handleToggleButton}
  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

امون رو در داخل اون قرار بدهیم و در نهایت اون state  دیدم بهتر هستش که بیایم و یک کامپوننت والد داشته باشیم و مقادیر cleanChat  نکته : همون طور که در کدهامون داخل پروژ  
رو بهتر هستش که بیایم و در setState رو یک جایی تغیرش بدهیم اون تابع state هارو  به  عنوان والد به بقیه کامپوننت ها بدهیم همچنین اگر نیازداشتیم که بیایم و این مقدار   state
کامپوننت والد    تعریف کنیم و بعد در انتها بیایم و اون رو به صورت پراپس بهش بدهیم

// کامپوننت والد

handleSubmit( message ) {
     this.setState((state) => {    return {  ...state ,  chatList: [ ...state.chatList,
           {       type: "send", message,    time: new Date().toLocaleTimeString() ,  },    ],  };    } );   }
               
<ّFooter handleSubmit={this.handleSubmit}/>               
                    
// کامپوننت فرزند

     this.state = { input: "",  };
              
    handleChange(event) {   this.setState({ input: event.target.value, });  }

    handleSubmit( ) {   this.props.handleSubmit(this.state.input);  }
    
    render(){
          <input    onChange={this.handleChange}  type="text" ....    />   .....
          <button   className="btn btn-primary"    type="button"   onClick={this.handleSubmit}  >   .....
        }  
                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

داشته باشیم و بعد State که میاد و میگه که بهتر هستش جریان داده ایم رو در یک کامپوننت به عنوان  Lifiting State Up  ما یک مفهومی رو در ری اکت داریم به نام 
به صورت جریان های داده ای یک طرفه به سمت پایین انتقالش بدیم S S T بیایم و از اون با استفاده از مفهوم

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
