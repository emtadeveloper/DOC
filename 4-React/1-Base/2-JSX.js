/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

JSX :  رو syntax شده و React.createElement یک جورایی اومده و جانشین jsx رو راحت تر انجام بدهیم HTML و Css یک نوع سینکس راحت شده هستش که میاد و کدهای  
میگویند sugar syntax برای ما راحت تر کنه اصطلاحا به اون میان و     

مینویسیم نیاز به این داریم که یک برنامه جانبی بیاد و استفاده کنیم تا کدهامون بیان و تبدیل بشن به اون چیزی که مدنظر ری اکت  jsx  نکته : ما وقتی میایم  و کدهامون رو به صورت  
برای این کار بهتر هستش که بیایم و از پکیج بابل  ES5  رو میاد و تبدیل اشون میکند به کد های  JSX   میگویند مثل بابل که برای تبدیل کدهای  pre process  هستش که به این کار 
رو بنویسیم و بعد اون رو ترجمه کنیم به جاوااسکریپ که در داخل صفحه امون نمایش داده بشه به صورت زیر میومدیم JSX استفاده بکنیم خوب ما قبلا وقتی میخاستیم که بیایم و یک کد 
و رفتار میکردیم

babel.js  transpile  jsx 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function Hello ( ) {     return <p> hello 7learn  students </p>  }   //   حالا ترجمه و تبدیل 

" use strict "
function Hello ( ) {  return  React.createElement( " p " , null  ,  " hello  7learn students " ) } 

React جزوی از خود ری اکت محصوب میشه ما برای اینکه بتونیم بیایم و از اون استفاده بکنیم باید میومدیم و   createElement  خوب نکته ای که در کدبالا وجود داره به واسطه این که 
در داخل تمام کامپوننت هامون اضافه میکردیم  

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

به جای JSX استفاده بکنیم اون رو در داخل آکولاد باز بسته میایم و قرار میدهیم  همچنین ما در داخل expression JS  هر موقع که خواستیم بیایم و از یک JSX نکته  :  ما در داخل 
استفاده میکنیم className هستش میایم   و از css که یک کلمه رزومی در class استفاده از

const  id = "greeting"

const element = < div className = " greeting" >Hello world ! <div/>

ReactDOM.render ( element , document.getElementById ( 'root' ) )

کد بالا به  return  ( <div> </div>  <div> </div> )  بکنیم    return   هستش اینه که ما باید بیایم و فقط یک تگ مادر رو بازگشت یا  JSX همچنین یک مشکلی که در استفاده از کدهای 
یگه بزاریم که این کار شاید در طراحی ما بیاد و ایجاد مشکل بکنه  که برای رفع این موشوع باید از div ما خطا می دهد که برای رفع این مشکل  که ما میتونیم این رو بیایم و در داخل یک تگ 
شیوه های زیر استفاده بکنیم

React.createElement دلیل ریترن کردن یک المنت هم به خاطر خود 

ما بهم نخورد و چیزی اضافه تر نیاد و رندر بشه UI استفاده از این تگ باعث می شود که اون   

1-   <>  </>   //    return (   <>    <div></div>     <div></div>      </>   )         

2-   <React.Fragment>  </React.Fragment>  //        return ( <React.fragment>      <div></div> <div></div>     <React.fragment>   )
          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

New JSX trasform : رو به کامپوننت امون اضافه بکنیم چون ابزار هایی که دارن میان و کد ما رو تبدیل میکنند React دیگه ما در داخل کد های جدید امون نیازی نداریم که بیایم و 
دیگه همچین چیزی از ما نمیخواهند

React17 این ویژگی برای این نسخه اومده 

function Hello ( ) {     return <h1> Hello world </h1>  }   //   حالا ترجمه و تبدیل 

import  { jsx as _jsx } from " react/jsx-runtime "

function  App ( ) {  return _jsx( ' h1 '  , { children : " Hello world " } )  }
    
هایی که اضافه شده به پروژه قبلی امون رو پاک بکنیم React  نکته : ما میتونیم بیایم و با استفاده از دستور زیر تمام 

cd your_project                  npx  react-codemod   update-react-imports

component و profiler بگیریم در داخل کنسول امون میبینیم که دو تا گزینه اومده و اضافه شده  به نام های inspect و اگر ما بیایم و اصطلاحا یک  React dev tools نکته : معرفی افزونه 

component :  تعداد کامپوننت هایی که برای ما اومده و اصطلاحا رندر شده رو نشون میدهد

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   

 قرار گرفته باشد jsx هر مقداری را که در   rendering  قبل از رندر شدن یا اصطلاحا عملیات ReactDom استفاده میکنیم به صورت پیش فرض  jsx  نکته : ما وقتی میایم و از فرمت
 میکنه بنابراین تضمین میکنه که هرگز چیزی به صورت مستقیم و صریح به کد ما تزریق نشه و هر چیزی رو قبل از این که بیاد و رندر بشه به یک رشته تبدیل میکنه escapes رو میاد و  
میاد و جلوگیری میکنه XSS که این کار از حملات 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

های ری اکت تغیر ناپذیر اند یعنی ما نمیتونیم بیایم و فرزندان و یا خصوصیات آن هارو تغیر بدیم و تنها راه ما اینه که بیایم و یک المنت جدید رو بسازیم و بعد اون رو به element
بدهیم ReactDOM.render  تابع 


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
