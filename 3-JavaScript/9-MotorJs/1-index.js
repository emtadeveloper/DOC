/*
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

و این ها جزو هسته   AJAX  و DOM و  setTimeout   رو در اختیار ما برنامه نویس قرار میدهد مثل API  هر مرورگر یک محیط اجرایی جاوااسکریپت داره که میاد و یکسری 
اصلی جاوااسکریپت نیستند بلکه یکسری آبجکت و متدهایی هستند که مرورگر در محیط اجرایی جاوااسکریپت خودش در اختیار موتور اصلی برنامه قرار میدهد که در واقع موتور
هستش V8  جاوااسکریپت جزئی از  محیط اجرای جاوااسکریپت  در مرورگر هستش  و هر مرورگر هم موتور مخصوص به خودش رو داره برای مثال موتور کروم 

محیط اجرایی جاوا اسکریپت ( Javascript Runtime Environment )   :
یک ظرف بزرگ هستش که از تعدادی ظرف کوچیک تر تشکیل شده است که وقتی کدهای جاوااسکریپتی ما در حال اجرا هستند هر بخش از کدهای ما متناسب با اون عملکردی 
که دارند میان و در داخل هر کدوم از ظرف ها قرار میگیرند

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1 - Motor v8

جاوااسکریپت از دو تا کامپوننت اصلی تشکیل شده است  که کارش این هستش که میاد و کدهای مارو تبدیل به باینری میکنه V8  موتور 

======================================================================================================================

1- call Stack :  وقتی موتور جاوااسکریپت شروع میکنه به اجرای کد های ما اون هارو میاد و در این حافظه لیست میکنه تا اجراشون کنه برای مثال وقتی که یک تابع    در
استک امون  میاد  و  لیست میشه  موتور جاوااسکریپت امون به سرعت شروع میکنه به تجزیه  کدش و  متغیر هاشون از حافظه فراخوانی میکنه یا اگر تابع یا متدی رو لازم 
بفرسته تا مرورگر وظیفه اشو به عهده بگیره و زمانی که تابع ما میاد و یک web API داشت اون  رو به بالای لیست امون اضافه میکنه یا شاید هم اون رو به ظرف مخصوص 
ها میره فورا از لیست استک امون حذف میشه و تابع بعدی میاد و در دستور کار برای تجزیه شدن قرار میگیره اگر تابع ما مقدار web API مقداری رو بر میگردونه یا به ظرف
رو برای برگشت داشته باشه همون رو بر میگردونه ولی اگه نداشت مقدار تعیرف نشده رو میاد و بر میگردونه

Frame Stack :  هر ورودی به کال است رو میگن

این مدل اجرای کدهای جاوااسکریپت که میاد به صورت دونه به دونه حل میکنه و از لیست استک امون خارج میکنه  و منتظر مقدار نمیمونه اگه در اون لحظه برگشت داده 
هستش که در لحظه فقط یک کار رو انجام میده synchronous نشه دقیقا چیزی هستش که میایم و میگیم که جاوااسکیرپت یک زبان تک تردی یا 

که به غیر از تابعی که در بالای لیست قرار دارد هیچ تابع دیگه ای رو مورد توجه  و تحلیل قرار LIFO : Last In, First Out  ساختار داده هامون در داخل کال استک به صورت 
نمیدهد و تا موتور جی اس اون رو حل نکنه سراغ تابع بعدی نمیره مگر اینکه اون تابع رو به طور کامل حل کنه یا اجراش رو به عهده مرورگر بسپاره    این  تابع به سرعت قابل 
مناسب هستش primitive  دسترس هستش و همون قدرم که سریعه محدودم هستش و نمیتونه دیتای زیادی رو در داخل خودش داشته باشه برای همین برای داده های از نوع 

منفجر کردن پشته اجرایی این زمانی اتفاق میوفته که به حداکثر سایز پشته اجرایی برسیم که خیلی هم ساده این اتفاق میتونه بیوفته اونم زمانی که داریم
از تابع بازگشتی استفاده میکنیم و کدمون درست حسابی تست نکردیم به این تیکه    function foo ( ) { foo ( )   }  foo ( )

-  کال استک یک پشته اجرای برای اجرای به ترتیب کد هامون هست
- منتقل شده web API  چطوری یک تابع از اون حذف میشه وقتی که کارش تموم شده و به جواب رسیده یا به 
- چرا جاوااسکریت یک زبان تک تردی هست
- LIFO نوع ساختار داده در کال استک یا 
- primitive چرا مناسب داده های از نوع 


2- memory Heap :    هستش و  نسبتا کنده و خوندن اطلاعات در داخل اون زمان بر هستش  از  مزایای  ای    حافظه  Stack  این حافظه بر عکس حافظه  بالایی یا 
هستند تو این حافظه میان و ذخیره  reference  این هستش  که اطلاعات  بیشتری رو درون خودش جا میده و ذخیره میکنه به همین دلیل متغیر هایی که به صورت 
می شوند دیتا ها در داخل این حافظه به صورت نامنظم میان و دخیره می شوند و هر دیتا هم یکسری آدرس برای خودش داره که این  آدرس هارو در حافظه ی استک
به تعریف متغیر داده میشه 

- نسبتا کنده
- فضای ذخیره بیشتری داره
- ذخیره دیتا ها به صورت نامنظم هستش و هر دیتا هم یکسری آدرس برای خودش داره
-  reference مناسب متغیر هایی از نوع 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2- web APIs :  میرسه اون هارو به این قسمت اون هارو به این جا   events listener Ajax DOM  setTimeOut  زمانی که  جاوااسکریپت میاد و به توابع و کدهایی مثل 
میفرسته تا مرورگر مسئولیت اشونو به عهده بگیره و در زمان مناسب مروگر بیاد و اون هارو یادآوری بکنه و زمانی که نوبت به اجرای هر کدوم از این اعمال شد این توابه میان و 
ارسال می شوند  callBack queue   به لیست توابع برگشتی یا 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3- callBack queue : میان و FIFO : First In, First Out شده در اینجا میاد و قرار میگیره و به صورت web APIs در این قسمت تمامی توابعی که زمان اجرا شدن اشون توسط 
قرار میگرند این قسمت میاد و کال استک ما رو چک میکنه و هر موقع که خالی بود میاد و یک دونه از خودش بر میداره و اونجا برای اجرا قرار میده و باز که خالی شد همین طور

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4- events loops  : رو چک میکنه که ببینه کی اون لیست خالی میشه  که ایا تابعی call Stack و  callBack queue  کار این قسمت اینه که میاد و به طور مداوم  مقادیر داخل 
در صف قرار گرفته یا خیر البته شاید یک موقعی باشه که هر دوتا خالی باشند ولی حلقه رویداد هیچ وقت غیر فعال نمیشه و دائما در حال چک کردن هستش

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5- garbage collection  :  ما هر اپلیکشنی که میایم و می نویسیم  این اپ  ما میاد و  یک فضایی در رم اشغال میکنه حالا وقتی این برنامه ما میاد و بیش از حد فضای  حافظه
 رو اشغال میکنه با مثلا متغیر هایی  که توش تعریف میکنیم یا متغیر هایی که قبلا تعریف کردیم ولی دیگه ازشون استفاده نمیکنیم حالا خود سیستم عامل میاد و جی سی رو صدا
 میزنه  و حافظه رو خالی میکنه در هر زبانی ما تعداد زیادی متغیر و داده رو تعریف میکنیم حال اگر این داده های زبان های برنامه نویسی مون هیچ کاری
 با این داده های ما نداشته باشند به مرور زمان این داده ها هی بزرگ بزرگ تر میشه و حافظه
زیادی رو از رم ما رو مصرف میکند و ممکن باعث خطا یا کرش در برنامه امون بشه  و همه زبان ها یک ابزاری دارند به نامکه متغیر هایی که استفاده نمی
شوند بیاد و اون متغیر هارو حذف کند که به این ابزار که در داخل سیستم برنامه هم هستش میگن 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
