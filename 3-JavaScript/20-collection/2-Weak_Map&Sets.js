/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

weakSet :هستند و لی یکسری تفاوت های باهم دیگه دارند set  مجموعه های ضعیف از لحاظ رفتاری بسیار شبیه به مجموعه های از نوع

تفاوت های set & weakSets

1-size و  clear دارند پشتیبانی میکنند به غیر از متد sets از تمامی متد هایی که 

2- ها رو نمیتونیم بیایم و قرارشون بدهیم  primitve type  در این نوع از کالکشن ها ما فقط میتونیم بیایم و آبجکت هارو به عنوان اعضای آن ها استفاده بکنیم و هیچ کدوم از 

const myWeakSet = new WeakSet();  myWeakSet.add('a');  ← "Uncaught TypeError: Invalid value used in weak set"

const myWeakSet = new WeakSet(['a' , 2]);     ← "Uncaught TypeError: Invalid value used in weak set"
  
خوب ما هر مدل آبجکت ای رو میتونیم بیایم و در این مجموعه ها قرارشون بدیم 

const myWeakSet = new WeakSet();      let array = [1 , 2 , 3];         let obj1 = {a:1 , b:2};         let obj2 = {c:3 , d:4};

myWeakSet.add(array).add(obj1);         console.log(myWeakSet.has(obj1));      ← true            console.log(myWeakSet.has(obj2));      ← false

3-      در این هستش که مجموعه های ضعیف آبجکت هایی که درون آن ها ما ذخیره میکنیم این آبجکت ها میان و  تا موقعی در دسترس ما هستند  Set  و  weakSet تفاوت اصلی 
میان و پاک می شوند یعنی عضوی که در آن ذخیره شده اگر راهی برای دستیابی بهش  وجود  GC یا اشاره گر رو داشته باشند در غیر این صورت به صورت خودکار توسط  point که یک 
نداشته باشد میاد و آن رو پاک میکند و تا حافظه ی الکی رو اشغال نکند البته میشه با استفاده از  ترفند هایی اومد و به صورت غیر مستقیم به اون ها دسترسی داشت ولی خوب لزومی
به این کار نیست

const mySet = new Set();               let array1 = [1, 2, 3];                 mySet.add(array1);                 console.log(mySet.has(array1));        // true

function addMember(s) {   let array2 = [4, 5, 6];       s.add(array2);       }

addMember(mySet);                      console.log(mySet.size);  // 2                 console.log(mySet.has(array2));              // array2 is not defined

خوب ما اگر مثال بالایی رو با مجموعه های ضعیف پیاده سازی کنیم می فهمیم که از حافظه میکنند

const mySet = new Set();               let array1 = [1, 2, 3];                 mySet.add(array1);                 console.log(mySet.has(array1));        // true

function addMember(s) {   let array2 = [4, 5, 6];       s.add(array2);       }

addMember(mySet);                      console.log(mySet);  // 1  Array                 console.log(mySet.has(array2));              // array2 is not defined

اتفاق افتادن همچین چیزی در عمل اتفاق بسیار نادری هستش و معمولا در برنامه های خیلی بزرگ احتمال همچین اتفاقی هستش برای همین موضوع یک اصطلاح برنامه نویسی هست
یا اصطلاحا نشت حافظه که این مجموعه های ضعیف یک راه برای جلوگیری از این اتفاق هستش  Memory Leak به نام 

4-به کار برد for of نیستند پس در نتیجه نمیشه آن هارو با استفاده از حلقه های  Iterable  مجموعه های عادی قابلیش شمارش یا  Set  برخلاف مجموعه های عادی یا اصطلاحا  
قابلیت تبدیل به آرایه نیستند   Array.from  یا  spread  و توسط عملکرد های 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

weak map : همون رفتار نقشه های معمولی رو داره و میشه گفت یکجور شاخه از بالایی هستش ولی یکسری تفاوت های کوچیک دارد

1 - برخلاف نقشه‌های عادی در نقشه‌های ضعیف کلید هر یک از اعضای نقشه حتماً باید یک شئ باشد. و امکان استفاده از انواع داده‌ی اولیه به عنوان کلید وجود ندارد

2 - از حافظه حذف می‌شوند Garbage Collector  در نقشه‌های ضعیف، اعضایی که هیچ اشاره‌گری به کلید آنها وجود ندارد، به صورت خودکار توسط

3-  در نقشه های ضعیف قابل استفاده نیستند size  clear values keys  entries forEach متد های 

4 - در آن ها کار نمیکند Spread  و for-of  و Array.from  قابل شماره و تبدیل به آرایه هم نیستند در نتیجه متد های 

let ali = {     family: "taghipour",      };        let m = new Map( );        m.set(ali, "Admin");
      
let emad = {    family: "taghipour",        };    let wm = new WeakMap( ) ;       wm.set(emad, "Admin");
      
console.log(m);      console.log(wm);       ali = null;        emad = null;        console.log(m);         console.log(wm);
       
فقط برای این مثال یادت باشه که خود کنسول رو باید ی چند بار رفرش کنی

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
