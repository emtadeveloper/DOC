/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2- Generator functions  : به تابعی گفته میشه که وقتی اجرا شدن، می‌تونیم اون رو متوقف و بعداً ادامه بدیم این نوع توابع  میان و به ما یک آبجکت رو خروجی میدن که 
به ما تحویل داده می شوند yield که با هر بار فراخوانی اون مقادیر next ( ) در داخل آن یک متد هستش به نام

رو فراخوانی کنیم که یک آبجکت هستش که دارای دو تا پراپرتی با نام  next()  نکته : ما وقتی  

value : yield مقدار 
done : به ما میگه تموم شده یا نه 
 
function* ownGen ( ){  console.log('first line :');    yeild 1 ;   console.log(' second line :');    yield 2 ;  }

let result = ownGen()  console.log(ownGen())

console.log('our result is : ',result);

console.log(result.next())

console.log(result.next())

نکات مهم در کار کردن با توابع جنریتور 

1- قابل پیمایش هستند for of هستند و توسط حلقه  iterable این توابع    

function* numbers() {  yield 1;  yield 2;  yield 3;   return 4;  }

const items = numbers();
 
for (num of items) {   console.log(num)  }

2- ما میتونیم بیایم و تمام مقادیر این توابع رو با استفاده از اسپرید بیایم و در داخل یک آرایه یا یک شی بریزیم

function* numbers() {    yield 1;  yield 2; yield 3;    }

console.log( [...numbers( ) ] );

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1 - توابع باید کوچک و کوچک تر باشند تا خوانایی اون ها به خاطر کوچک بودنشون بهتر بشه 

2 - یک تابع نباید به اندازه ای بزرگ باشد که بتواند ساختار های تو در تو را نگهداری کند  و ساختار های تو در تو در یک تابع نباید بزرگ تر از ۱ یا ۲ باشد 
( ساختار های تو در تو منظور while if و ..)

3 - تابع باید یک کار انجام دهد و آن را به خوبی انجام دهد و فقط هم  همین کار را انجام دهد یکی از راه های شناختن این که تابع بیش از یک کار را انجام می دهد این است
 که شما نتونید تابعی با نام دیگری از درون آن استخراج کنید که صرفا یک بازگویی مجدد از اجرای کار در آن باشد

4 -برای نامگزاری نام توابع از عبارت های توصیفی استفاده کنید یک نام توصیفی  طولانی بهتر از یک نام کوتاه مبهم می باشد همچنین یک نام توصیفی طولانی
 بهتر از یک کامنت توصیفی طولانی می باشد

5 - بهترین حالت یک تابع برای داشتن آرگومانت این هستش که یا نداشته باشه  یا یکی داشته باشه یا هم دو تا و داشتن یک تابع با داشتن آرگومنت های مختلف 
از نظر تست کار رو برای ما سخت تر میکند  سختی نوشتن تمام مورد های آزمون برای اطمینان از اینکه تمام ترکیبات مختلف آرگومان وجود داشته باشد کار خیلی سختی هستش

6 - تابع و آرگومان باید ترکیب از اسم و فعل باشند که باهم هماهنگی داشته باشند 

7 - قانون جدا سازی فرمان و جست و جو توابع ما باید یا به چیزی پاسخ دهند یا اینکه  کاری انجام دهند و نه هر دو برای مثال تابع ما باید وضعیت اشیا را تغیر دهد یا اینکه 
باید برخی از اطلاعات مربوط به اشیا را بر گرداند  و انجام این دو کار با هم باعث سردرگمی بیشتر می شود

8 - قانون گام به گام ما وقتی میایم و کدمون رو می نویسیم باید شبیه به یک داستان باشد و هر تابع باید باید توسط توابع که در سطح بعدی انتزاع هستند دنبال شود تا
 بتوانیم برنامه را بخانیم

9- سعی شود از ترای کچ تو خطوط توابع امون استفاده نکنیم یا هم اگر مجبور به  استفاده شدیم اول خط باشند

10 - استفاده از عبارات سوییچ در ارث بری ها  و رعایت پولیفورمیسم هستش که باید حتما اون رو رعایت کنیم دلیلش هم قواعد سالید هستش

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
