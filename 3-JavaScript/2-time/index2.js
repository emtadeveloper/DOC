/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1 -  setTimeout :   هستش callBack یک تابع برای ایجاد یک وقفه زمانی برای اجرای کدهامون هستش که میاد و 3 تا ورودی میگیرد که اولین ورودی اون یک 
ما  callBack و دومین ورودی اون هم یک عدد به عنوان وقفه زمانی یا تایمر تاخیر اش و به عنوان آخرین ورودی هم  یک سری آرگومنت به عنوان ورودی که به تابع 
داده می شود

let timerId = setTimeout(callBack,dealy,arg)                         let a = setTimeout (  ( a , b )  =>  {   console.log ( a + b ) ;  } ,  1000 ,  2 , 3  );
      
نحوه اجرای این تابع در موتور جاوااسکریپت 
یک تایمر درست میکنه و هر وقت که اون تایمر ما منقضی webAPI نمیکنه بلکه میاد و در مرحله eventloop ما رو وارد callBack  این تابع به صورت اتوماتیک اون تابع 
میکنه و باید این تابع صبر  کنه تا فرایند تیک تاک اتفاق بیافته eventloop مارو وارد صف callBack  شد میاد و تابع 

2 -  setInterval  این تابع شبیه به تابع بالایی هستش ولی تنها تفاوتی که داره این هستش که در هربازه زمانیکه بهش بدیم میاد و هی اجرا میشه

که هر موقع این توابع رو به یک تابع دیگه نسبت بدهیم میتونیم بیایم و از اون استفاده بکنیم و کاربرد اون هم موقعی هستش که میخایم  timeId  ما یک کلمه کلیدی داریم
بیایم و یک تابع یا متغیر رو پاک کنیم تا جلو اجرای مجدد اون رو بگیریم

setTimeout ( function ( ) {clearInterval ( timerId ) }, 6000)    //   var timerId = setInterval (test , 2000 ," salam " );

clearInterval        clearSetTimeout        دو تا توابع برای پاک کردن چرخه های زمانی مون

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

name = "ali";
const obj1 = {
    name: "emad",
    getName: setTimeout(function () {
        console.log(this.name);
    }, 1000),
};
obj1.getName;  // name

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
