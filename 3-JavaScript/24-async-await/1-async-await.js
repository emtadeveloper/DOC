/*
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

async Await

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

رون اون تابع متوقف می شود Await رو میایم و قبل از یک تابع میایم و قرار اش میدهیم میایم و به موتور جاوا اسکریپت میگویم که بیا و یک تفاوت قائل شو و هر زمان که کامپایلر به کلمه ی   async  وقتی کلمه 
و هر چیزی رو بعد از اون رو به صورت یک قول برای ما میاد و بر گشت میدهد همین منتظر جواب قول میماند که وقتی جوابش اومد کد های تابع را اجرا میکند و میتونیم با اون بیایم و به صورت یک قول رفتار بکنیم

Example  : ما یک موقع هستش که باید بیایم و از قول های تو در تو استفاده کنیم  به این شکل که بیایم و در دن یک قول دیگه رو پاس بدیم 

function sayName(name) {
    return new Promise(
        (resolve, reject) => console.log("init Promise 1"),
        setTimeout(() => resolve(name), 2000)
    );
}

function Valet(user) {
    return new Promise((resolve, reject) =>
        setTimeout(() => {
            if (user === "emad") {
                resolve("1000 $");
            } else {
                console.log(user);
                reject("no money");
            }
        }, 4000)
    );
}

function showProfile(userName) {
   sayName(userName)
          .then(Valet)
          .then((e) => console.log(e));   انگاری جواب اولی که اومد داده میشه به قول دومی تا بره و جواب دومی بیاد
}

showProfile("emad");

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

یک آرایه از جواب های مورد نظر ما برمیگرداند که برای مدیریت آنها می توانیم با دیستراکچرینگ به مقادیر مورد نظرمون دسترسی داشته باشیم

function doubleAfter(Param, time) {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(Param);
        }, time);
    });
}

async function doubleAndAdd(arg1, arg2) {
    const [a, b] = await Promise.all([
        doubleAfter(arg1, 1000),
        doubleAfter(arg2, 2000),
    ]);
    return a + b;
}

doubleAndAdd(4, 4).then((e) => console.log(e));

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Example  : async await  
 حال ما با استفاده از مفاهیم بالا می توانیم بیایم و در تابعی که باید پرامیس  هامون رو جدا گانه به هم بدهیم رو بهتر بنویسیم

function sayName(name) {
    return new Promise(
        (resolve, reject) => console.log("init Promise 1"),
        setTimeout(() => resolve(name), 2000)
    );
}

function Valet(user) {
    return new Promise((resolve, reject) =>
        setTimeout(() => {
            if (user === "emad") {
                resolve("1000 $");
            } else {
                console.log(user);
                reject("no money");
            }
        }, 4000)
    );
}

async function showProfile(userName) {
        let user = await sayName(userName);
        let Value = await Valet(user);
        console.log(Value);
 }
 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
