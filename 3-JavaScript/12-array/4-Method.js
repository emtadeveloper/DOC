/*
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------            
مجموعه نکاتی برای کار کردن با آرایه ها
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- استفاده بکنیم  set  برای درست کردن یک لیست از آرایه ها که مقادیر اون کاملا یکتا هستند بهتر هستش از روش 
  
let numbers = [1, 1, 4, 4, 4, 5];      let uniqueNumbers  =  Array.from(new Set(numbers));     console.log(uniqueNumbers); // [ 1, 4, 5 ]

let uniqueNumbers = [...new Set(numbers)];         console.log(uniqueNumbers); // [ 1, 4, 5 ]

حال اگر لازم بود که خودمون بیایم و این شرط رو بنویسیم بدون استفاده از این قابلیت به صورت زیر میتونیم بیایم و این کار رو انجام بدهیم

const arrayOfNumber = [1, 2, 2, 2, 3, 3, 4, 4, 5];

const implementionOfSet = (arrayOfDuplicateMembers) => {
    let uniqueMembers = {};
    arrayOfDuplicateMembers.forEach((item) => {
        if (!uniqueMembers[item]) {
            uniqueMembers[item] = true;
        }
    });
    return Object.keys(uniqueMembers);
};

console.log(implementionOfSet(arrayOfNumber));

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--  استفاده کنیم  spread برای جایگزینی برای یک مقدار آرایه بهتر هستش  بیایم و از تابع

let numbers = [ 1, 2, 3 ];      let allNumbers = [ ...numbers, 4, 5, 6] ;       console.log( allNumbers ); // [ 1, 2, 3, 4, 5, 6 ]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- برای خالی کردن یک آرایه روش های مختلفی هست

var numbers = [1, 3, 5, 7, 9, 11];

numbers = [];  // or    numbers.length = 0;  // or   numbers.splice(0);  // or  while (numbers.length > 0) {   numbers.pop()   }

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- برای تبدیل یک آرایه به آبجکت هم بهتر هستش که بیایم و از  سه نقطه استفاده بکنیم همچنین برای ترکیب کردن آرایه ها هم می تونیم از سه نقطه 
استفاده بکنیم

let numbers = [1, 4, 7, 11];  let numbersObj = { ...numbers };    console.log(numbersObj)    //   {   0: 1,    1: 4,     2: 7,      3: 11    }
  
let odd = [ 1, 3, 5, 7, 9 ];    let even = [ 2, 4, 6, 8, 10 ];   let float = [ 10.5, 13.5 ];          let all = [ ...odd, ...even, ...float ];

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- حذف null، false، undefined و ... از آرایه

var mixedArray = [0, "blue", "", NaN, 9, true, undefined, "white", false];

console.log(mixedArr.filter(Boolean)); // ["blue", 9, true, "white"]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- گرفتن مقدار تصادفی از آرایه

let numbers = [13, 17, 23, 29, 31, 37];
let randomValue = numbers[Math.floor(Math.random() * numbers.length)];

که می تونیم بیایم و تابع بالا رو به پروتوتایپ اش هم بدیم

Array.prototype.random = function () {  return this[Math.floor(Math.random() * this.length)]    }

console.log(numbers.random());      console.log([ 1, 2, 19, 769 ].random());

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 -- خیلی از توابع بالا به عنوان پارامتر اخر یک  میگیرند که میاد و اون دیس رو اصطلاحا بایند میکنه به تابع ما thisArg 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- استفاده بکنیم  max  min برای پیدا کردن بزرگ ترین و کوچک ترین مقادیر یک آرایه بهتر هستش بیایم  و   از توابع  و 
 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

اگر اومدن و یک سوال دادن به ما به شکل  زیر بدون که از اون مقدار تا اونجایی که مد نظر هست رو مقدار تعریف نشده قرار می دهد  طول آرایه تغیر میکنه

const arrayOfOddNumbers = [1, 3, 5];       arrayOfOddNumbers[100] = 199;         console.log(arrayOfOddNumbers.length);  // 101

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
