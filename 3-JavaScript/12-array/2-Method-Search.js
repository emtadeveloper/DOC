/*

=========================================================================================================
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

برای سرچ زدن هم یکسری توبع داریم که به ترتیب پایین هستند و میتونیم اون هارو ببینیم سرچ هایی که نیاز داریم که به ما یک مقدار بولین رو بر گردونه

8- includes ( searchElement, fromIndex) :  کاری که این ارایه انجام میدهد میاد و یک مقدار  بولین رو برای ما  بر میگردوند که این مقدار بر این اساس هستش
که میاد و تمام ارایه رو سرچ میکنه و اگر اون مقداری که ما میخاستیم در کال بک اش برقرار بود برامون مقدار بولین رو برمیگردوند همچنین به عنوان آرگومنت دوم
میتونه بیاد و ایندکس شروع رو هم بگیرد

let array = [1, "ee", "3", 2, 3, 4, 5, 6, 78];    console.log(array.includes("3"));

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9-every (callBack ) هر موقع ما خواستیم بیایم و بررسی کنیم که تمام اعضای آرایه امون  از یکسری شرط میان و تبعیت میکنند از این تابع استفاده میکنیم و این 
تابع میاد و شرطی که در تابع کال بک اش هست رو برای همه اعضای آرایه امون اعمال میکند و اگه بر قرار بود مقدار بولین  رو بر میگردوند

var numbers = [11, 12, 13, 14, 20, 29];
var areGreaterThan10 = numbers.every(number => number > 10);
console.log(areGreaterThan10); // true

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

10- some ( callBack ) این متد شبیه متد بالایی هستش فقط  به ما میگوید که این ارایه ای  که داریم  حداقل یکی از اعضاش از شرطی که قرار دادیم بیاد و تبعیت بکند
و مقدار بولین بر میگردوند

var numbers = [2, 3, 5, 11];
var hasBiggerThan10 = numbers.some(item => item > 10);
console.log(hasBiggerThan10); // true

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=========================================================================================================

سرچ هایی که نیاز داریم همون مقدار رو بر گردونه

11 - find  (callBack ) : در آرایه ما میاد و سرچ میکنه و اولین مقداری که شرایطش با شرط کال بک تابع  بخوره رو برای ما میاد و بر میگردونه  

let animals = [
  { name: "Tibbers", type: "cat", isNeutered: true, age: 2 },
  { name: "Fluffball", type: "rabbit", isNeutered: false, age: 1 },
  { name: "Strawhat", type: "cat", isNeutered: true, age: 5 }
];

let animalTypeFound = animals.find(animal => animal.type === "cat");    console.log(animalTypeFound);

findIndex  (callBack ) مشابه تابع بالایی هستش فقط به جای خود مقدار میاد و ایندکس اون  رو برای ما بر میگردوند

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

12- filter (callBack ) :  یک آرایه رو به عنوان خروجی بر میگرداند و اون مقادیری  که در شرط امون صدق بکنه میاد  و همه شو برای ما  در غالب آرایه بر میگردوند   

let animals = [
  { name: "Tibbers", type: "cat", isNeutered: true, age: 2 },
  { name: "Fluffball", type: "rabbit", isNeutered: false, age: 1 },
  { name: "Strawhat", type: "cat", isNeutered: true, age: 5 },
];

let neuteredAnimals = animals.filter((a) => {   return a.isNeutered == true ;  });
 
console.log(neuteredAnimals);

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=========================================================================================================

توابع پر کاربرد در استفاده از آرایه ها 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

13- map (callBack(item,index,array)) , forEach (callBack(item,index,array) ) :   میگیرند  callBack هر دو تای این متد ها میان و یک  
که میاد و روی تک تک آیتم های آرایه امون اعمال می شود حال این دو تا متد یکسری تفاوت هایی هم باهم دارند که اون هارو بررسی میکنیم

==================================================================================================================

- returning Value : میاد forEach میاد و برای ما یک آرایه جدید رو بر میگردونه ولی متدmap مقداری که بازگشت میدهدند باهم دیگه متفاوت هستش متد 
رو بر میگردونه undefined و برای ما مقدار

const Array = [1, 2, 3, 4, 5];

console.log(Array.forEach((x) => x * 2));     //>>>>>>>>>>>>>       return value: undefined

console.log(Array.map((x) => x * 2)); ;         //>>>>>>>>>>>>>       return value: [1, 4, 9, 16, 25]

==================================================================================================================

- متد های دیگر chaining قابلیت

forEach  کنیم ولی متد chain نوشته شده رو میتونیم بیایم و و بعد سریع از متد های دیگه استفاده کنیم یا اون رو اصطلاحا  map ما متدی رو که اومده و با استفاده از 
کنیم chain رو بر میگردونه نمیتونیم بیایم و اون رو  undefined  به واسطه اینکه مقدار

const Array = [1, 2, 3, 4, 5]

Array.forEach(x => x * x).reduce((total, value) => total + value)   //> Uncaught TypeError: Cannot read property 'reduce' of undefined

Array.map(x => x * x).reduce((total, value) => total + value)         //> return value: 55
 
==================================================================================================================

- mutate  :  رو undefined حتی اگر بیاد و مقدار forEach هستش ولی متد   non - mutate  چون میاد و یک مقدار جدید کلن بر میگردونه یک متد از  نوع   map متد 
تغیر میدهد  callBack  برگردونه میاد و آرایه اصلی را با 
                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

عمل بکنه میتونیم    از راه حل زیر استفاده بکنیم map اگر از ما خواستند که بیاین و یک تابع رو بنویسید که دقیقا شبیه به 

function IP_Map(callBack, thisArg = this) {   
    old_array = thisArg;
    new_array = [];
    for (let index = 0; index < old_array.length; index++) {
        new_array.push(callBack(old_array[index], index, old_array));
    }
    return new_array;
}

Array.prototype.IP_Map = IP_Map;

const List_number = [1, 2, 3, 4, 5];

let List_calc = List_number.IP_Map((item) => item * 2);

console.log("new Array  : ", List_calc, "old Array :", List_number);

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

رو بر میگردونند Boolean توابع سرچ که یک مقدار 

8- includes ( searchElement, fromIndex)
9- every (callBack ) 
10-some (callBack ) 

توابع سرچ که میان و همون مقداری که لازم داریم رو برامون بر میگردونند
11 - find  (callBack )  findIndex  (callBack )
 12- filter (callBack ) برای پیمایش آرایه ها 
13- map  forEach

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
