/*

Mutate   &   non-Mutate 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

میگویند حالا در پایین میایم و یکسری از توابعی که اصطلاحا Mutation  /  Mutate  به توابعی که میان و  روی آرایه یا آبجکت اصلی مون تغیر ایجاد میکنه 
عمل میکنند رو معرفی میکنیم Mutate میان و به صورت 

در آرایه ها میان و روی مقدار های آرایه اصلی مون رو تغیر می دهند و یک آرایه جدید رو تحویل میدهند  Mutate  توابعی 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1- توابع   push  / pop  :  اضافه و حذف کردن به انتهای یک آرایه امون 

let array = [1, 2, 3, 4, 5, 6, 7];               console.log(array);                   array.push(9)               console.log(array);    
array.pop()   console.log(array)  

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2 - توابع unshift : برای اضافه کردن به ابتدای آرایه امون      //      shift : برای حذف کردن از ابتدای یک آرایه امون

let array = [1, 2, 3, 4, 5, 6, 7];               console.log(array);                   array.unshift(9)               console.log(array);        
array.shift()   console.log(array)  

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3- splice ( Number-Index-Starter ,  Number-Index-Finisher-remove ,  Number-Index-Add  )   
این تابع برای برش زدن از آرایه امون میاد و استفاده میشه و تغیرات رو در آرایه اصلی مون ایجاد میکنه و 3 تا ارگومنت میگیره اولی بیاد و ایندکس از کجا 
شروع کنه  و دومی چه تعداد بعد حذف رو بیاد و پاک کنه و سومی هم چه چیزی بیاد و اضافه کنه

let List = [1, 2, 3, 4,8,9,10];           console.log(List.splice(4, 1,'ll'));          console.log(List);

let arr = [1,2,3,4,5]    arr.splice(0,arr.length)  console.log(arr)   //   [ ]

=========================================================================================================

- slice  (Number-Index-Starter,Number-Index-Finisher):  این تابع کاری که انجام میده دقیقا شبیه بالایی هستش و برای برش زدن مورد استفاده
قرار میگیرد و کاری که انجام میدهد اینه  مقادیری که قراره برش بخوره رو در غالیب یک آرایه برامون بر میگردونه و آرایه اصلی شو تغیر نمیده 

let List = [1, 2, 3, 4,8,9,10];            console.log(List.slice(2,4))           console.log(List)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4- sort (callBack)  :   برای مرتب سازی به کار میره و پیش فرض اون برای رشته ها خوبه ولی برای اعداد به خاطر بر خورد یکانی و دهگانی به مشکل میخوره   
بگیره و بیاد و مرتب سازی آیتم هامون رو callBack اون هارو تبدیل به رشته میکنه و بعد میاد و مقایسه رو انجام میدهد این متد میتونه یک تابع رو به عنوان 
بر اساس اون تابع انجام بدهد این متد همچنین به ما یک آرایه جدید تحویل نمیدهد بلکه میاد و آرایه امون رو تغیر میدهد

let List = [ 1, 2, 4, 3, 9, 8, 10 ];      console.log( List.sort ( ) );

console.log (     List.sort ( function ( a, b ) {     return a - b      }))

console.log (    List.sort ( function ( a, b ) {       return b - a     }))

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5-  reverce  : برای معکوس کردن آرایه امون از اون استفاده میکنیم و تغیرات رو داخل خود آرایه اصلی مون انجام میده

let numbers = [ 1, 2, 3, 4, 5 ];    let reversed = numbers.reverse();       console.log(reversed); // [ 5, 4, 3, 2, 1 ];
 
نکته :  این تابع میاد و روی آرایه اصلی مون هم تاثیر میزاره و اون رو معکوس میکنه که  برای این که این کار بیاد و روی تابع کپی انجام بش
ه بهتر این کار رو بکنیم


let numbers = [ 1, 2, 3, 4, 5 ];      let reversed = [ ...numbers ].reverse();

console.log(reversed); // [ 5, 4, 3, 2, 1 ];        console.log(numbers); // [ 1, 2, 3, 4, 5 ]
 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6- fill method : این متد برای پر کردن آرایه که سه تا آرگومنت دارد که اولی اجباری و بقیه اختیاری هستش ورودی اول اون چیزی هست که میخاهیم
جایگزین کنیم و ورودی های بعدی اندیس ابتدا و انتها هستش

fill ( value , start , end )

let List = [1, 2, 3, 4];        List.fill("EM")    console.log(List);

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7- copyWithin  ( target , start , end ) : این متد بدون تغیر دادن طول آرایه امان میاد و یک قسمتی از آرایه رو در داخل خودش کپی میکنه و آرایه قبلی 
امون رو به کل میاد و تغیر اش میدهد و سه تا پارامتر میاد و میگیرد

target : الزامی هستش و میاد و اون نقطه جایگزین شدن ما رو میگیرد که اگر مقدار منفی باشد جایگزینی از آخر اعمال می شود و اگر مقدار مقدارش بزرگ تر
از مقدار طول آرایه باشدهبچ عنصری کپی و جایگزین نمی شود

start  : نقطه شروع کپی گرفتن ما هستش و اگر مقدار مقدار آن برابر با منفی باشه میاد و از آخر برامون لحاظ می شود و اگر کلن در نظر گرفته نشود کپی از ابتدا
میاد و در نظر گرفته می شود

end :  انتهای کپی در نظر گرفته می شود  و اگر مقدار ان منفی باشد یا درنظر گرفته نشود تا انتهای آرایه ادامه پیدا میکند

var array_1 = [1, 2, 3, 4, 5, 6, 7];                    console.log(array_1.copyWithin(3));    // [ 1 , 2 , 3 , 1 , 2 , 3 , 4 ]

خوب در داخل این مثال میاد و از اول آرایه تا ایندکس که بهش دادیم رو کپی میکنه و در اون جا قرار میدهد و مابقی آیتم هارو هم تا موقعی 
که طول آرایه تغیر نکنه قرار می دهد وگرنه میاد و مابقی اصطلاحا نادیده میگیرد

var array = [1, 2, 3, 4, 5, 6, 7];                    console.log(array.copyWithin(3,0,1));    // [ 1 , 2 , 3 , 1 , 5, 6, 7 ]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

هستند  Mutate  توابعی که در داخل جاوااسکریپت میان و اصطلاحا

1- push ( value ) / pop ()  سرعت این ها به نسبت پایینی بیشتره چون از آخر اعمال میشه و اونایی که از اول اعمال میشه
2- unshift  ( value )  / shift ()  آیتم ها باید بیاد و آپدیت بشه index مجدد
3- splice ( Number-Index-Starter,Number-Index-FinisherوNumber-Index-Add  )
4- sort ( callBack )
5- reverve ()
6- fill ( value , start , end )
7- copyWithin(target,index-start-copy,index-finish-copy)

// slice که میاد و یک کپی برای ما بر میگردوند  splice یک تابع مشابه 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
