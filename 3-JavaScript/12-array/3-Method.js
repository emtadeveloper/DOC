/*
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

14- reduce ( function ( ago,ready,index , array  ) , arg )    :          این تابع اساسا وظیفه اش ترکیب  کردن هستش که کاری که میکنه چیه اینه که یک تابع   
کال بک به عنوان پارامتر میگیرد که اولی مقدار به دست اومده از فرآیند قبلی که در دفعه ی اول میاد و اون مقدار پیش فرض رو میگیرد و دومی هم مقدار فعلی در آرایه 
یکی از بهترین مثال ها برای نشون دادن کاربرد این تابع مثال جمع هستش

کاربرد های این متد

1- sum

let List = [1, 2, 3];      function sum(array) {    let sum = array.reduce( (x, y) => {    return x + y;    });    }     console.log ( sum ( List ) );

2 - count items 

const  arr = [ ' foo '  , ' bar ' ,' foo ' ]

const  count = arr.reduce((acc,item) => {
  if( acc.has ( item )){      return  acc.set(item,acc.get(item) + 1)   }else {   return acc.set(item,1)   }  } ,new Map())      // counts => { foo : 2 , bar : 1}
    
3- Maximum by field

const  objects = [    { name : 'foo' ,  value:123  },     { name : 'bar'  ,value: 100 },     { name  'baz':  , value: 150  }, ]

const maxValueobjec = objects.reduce(acc,object)=>{ 
    if(acc.value > object.value){
        return acc
    }else{
        rerurn object
    }
});    max :   { name  'baz':  , value: 150  }


4-Grouping

const  objects = [    { type : 'a' ,  value:123  },     { type : 'a'  ,value: 100 },     { type  'b':  , value: 150  }, ]
  
const group = objects.reduce((acc,item)=>{
    iff(!acc[item.type ] ){
        acc[item.type] = [ ]
    }
    acc[item.type].push(item.value)
    return acc
},{})   //  group  { a : [ 123,100 ] , b: [ 150 ]}



===================================================================================================================

مثال اگر خوایت یک تابع بنویسیم که با استفاده از این متد بیاد و تمام مقادیر یک آرایه رو برامون 2 برابر بکنه

const arrayOfNumbers = [1, 2, 3];

arrayOfNumbers.reduce((ago, curent, index, array) => {    array[index] = array[index] * 2;   }, 0);
  
console.log(arrayOfNumbers);  // [ 2 , 4 , 6 ]

===================================================================================================================

عمل بکنه  reduce  حال اگر از ما خواستن که بیایم و یک تابع بنویسم که دقیقا شبیه به

function IP_Reducer(callBack, initialValue) {
    let array = this;      let value = initialValue || null
    for (index = 0; index < array.length; index++) {     value = callBack(value,array[index])     }
    return value;
}

Array.prototype.IP_Reducer = IP_Reducer;    list = [1, 2, 3, 4, 5, 6];

let sum = (ago, ready) => ago + ready;       console.log(list.IP_Reducer(sum)); // 21

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

15- Flat(number) : کاری که این تابع برای ما میکند این هستش که میاد و آرایه های چند بعدی رو برای ما به بعد های پایین تر میشکافه و به عنوان پارامتر اختیاری یک 
یک عدد میگره که میگه بیا و تا چه سطحی برامون شکاف ایجاد بکن و همچنین اگر مقدار بی نهایت بهش بدیم به ما یک آرایه یک بعدی رو تحویل میدهد و اگر 
به آن مقداری رو ندیم میاد و در یک سطح برامون فقط این شکاف رو ایجاد میکنه اگر مقدار های 0 و منفی هم بدهیم برای ما هیچ تاخیری رو ایجاد نمیکند

var arr1 = [1, 2, [3, 4]];                                                   console.log(arr1.flat());                         //  [1, 2, 3, 4]
 
var arr2 = [1, 2, [3, 4, [5, 6]]];                                         console.log(arr2.flat());                         //   [1, 2, 3, 4, [5, 6]]

var arr3 = [1, 2, [3, 4, [5, 6]]];                                         console.log(arr3.flat(2));                        // [1, 2, 3, 4, 5, 6]
 
var arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];                   console.log(arr4.flat(Infinity));               // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

16- indexOf(value,arg2) : این متد هم در آرایه ها و هم در رشته ها مشترک هستش و میاد و مقدار ورودی میگیره و ایندکس ورودی امون رو به ما نشان می دهد

let List = ["A","B","C","D","E","F","G"];             console.log(List.indexOf("G"));
  
lastIndexOf : دقیقا شبیه به بالایی رفتار میکنه با این تفاوت که از آخر شروع به شمارش میکند

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

17- contact ( arg1,arg2 )  :  هستند این نوع متد هم تابع هم combining اصطلاحا به این نوع متد ها میان و میگویند که متد های از نوع   
برای رشته ها و برای ارایه ها کاربرد داره و کاری که انجام میدهد اینه که میاد و دو تا آرایه  رو بهم پیوند میده

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

18 - join / toString

var arr1 = [1, 2, 3, 4];

console.log(arr1.join("|"));   // 1 | 2 | 3 | 4               console.log(arr1.toString(), typeof arr1.toString());  // 1, 2, 3, 4  string

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

توابع پر استفاده و پر کاربرد

14- reduce ( function ( ago,ready,index , array  ) , arg )
15- Flat(number)
16- indexOf(value,arg2)     lastIndexOf(value,arg2) 
17- contact ( arg1,arg2 )  
18 - join / toString
19 - isArray( Array )

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
