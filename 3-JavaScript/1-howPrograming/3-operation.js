/*
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

javascript Operators 

1-  Arithmetic     +   -   *   /   **    %     increment   + +    decrement  - - 

2-  Assigment   + =    - =    / =   * =

3-  Comparison  >=  <=  >  <   == ===  !=  :  result : boolean : true / false

4- Logical   /   logincal    with   none-boolean

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

let x = 3   console.log( ++x )   نکته :    مقدار رو اضافه میکنه و بعد نمایش میدهد   یعنی مقدار رو به رو برابر با 4 چاپ میشه
ket y = 10   console.log( y++ )   میاد و مقدار 10 رو نمایش میدهد و بعد اضاف میکند
console.log(y) میاد و همون اول مقدار 11 رو نمایش میدهد دیگه

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=========================================================================================================================

 هستند عبارت هایی هسنند که عبارت نادرست رو برای ما میگردونه این عبارت ها  falsy نکته : ما یک سری مفهوم داریم  برای  عملگرد های از نوع لاجیک یک عبارت هایی که از نوع 
هستش truthy که حال هر چیزی که جز مقادیر بالا نباشه  ""  null  undefined  NaN  false  0 شامل عبارت هایی میشوند که مقادیر روبه رو بیان و بگیرند 

falsey :   false     null    NAN    undefined   0 

&&  ||   !    هستند و میاد و لاجیک مارو انجام میدهد  boolean هر دو تا سمت اون اصطلاحا از نوع 

هستش یا خیر  falsy  نکته : ما از دو تا راه میتونیم بیایم و بررسی کنیم که  متغیر ما از نوع عبارت 
 
1 - Boolean استفاده از توابع مخصوص  

2 -   !! استفاده از عملگر 

var sch = null;

// #1 :   console.log(Boolean(sch)); // false

// #2  :  console.log(!! sch); // false

=========================================================================================================================

&& : رو میاد و برای ما بر میگردونه و اگر نبود میاد و آخرین مقدار عبارت رو بر میگردونه  falsy  میاد و اولین مقدار عبارت نادرست یا and عملگرد 

console.log("emad"&&"all"&&"majed")      :   majed            //      console.log("emad" && "all" && "majed")      :   majed

console.log(true && true && true && "majed")    :   majed

=========================================================================================================================

|| : رو به ما بر میگردونه و اگر نبود میاد و آخرین مقدار رو برای ما بر میگردونه truthy میاد و اولین مقداری که از نوع درست یا  or  عملگرد

console.log( false ||  0 )   :   0            //       console.log( false || "emad" )            :  emad         //         console.log("emad"||true || true || true)   :   emad

=========================================================================================================================

variable_1 ?? variable_2   : نبود خودش رو بیا و قرار بده برامون   null   رو قرار بده و اگر برابر با   variable_2   بود بیا و مقدار   null  برابر با   variable_1  اگر مقدار 
 
if ( variable  !==  null ) { }  else { }

=========================================================================================================================

کاربرد عملگرد !! : این عملگرد وقتی پشت هر مقداری میاد و قرار میگیرد اون به مقدار بولین تبدیل میکنه

console.log(!! null);       //   false          console.log(!! undefined)     //  false         console.log(!! NaN);       // false

console.log(!! '');           //    false          console.log(!! 0);                  //   false

console.log(!! ' ');          //    true           console.log(!! {});                  //    true         console.log(!! []);             // true             console.log(!! 1);         // true

=========================================================================================================================
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

=== : میاد و مقایسه رو بر اساس نوع اون ها انجام میده و باید هر دو طرف نوع ها امون یکی باشد

== :  میاد و برای مقایسه اون ها یک تبدیل نوع رو انجام میده و هم نوع اشون میکنه و بعد مقایسه میکنه برای مثال اگر یکی رشته و یکی عدد باشه هر دو طرف رو تبدیل به عدد میکنه
و بعد میاد و مقایسه رو انجام میدهد

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ما به طور کلی 2 تا مفهوم در جاوااسکریپت برای تبدیل انواع داده به هم دیگه داریم 

1-Implicit Coercion  : تبدیل نوع داده به صورت خودکار که در مثال های زیر میتونیم بیایم و اون هارو ببینیم

console.log(1 + '6');        // 16 (type of string)      console.log(false + true);       // 1 (type of number)         console.log(6 * '2');         // 12 (type of number)
 
2-Explicit Coercion  در این روش ما خودمون باید بیایم و این تبدیل داده رو با روش هایی انجام بدیم که این روش ها به شرح زیر هستش 
  
مفهوم تبدیل انواع داده به یک دیگر type casting or type Conversion

توابع برای تبدیل نوع به یک دیگر  

let number = "123.456";          let  num = Number(number)            //  .number ( )
let number = "123.456";          let  float = parseFloat(number)       //  .parseFloat()
let number = "123.456";          let  int = parseInt(number)              //  .parseInt()
let number = "123.456";          let  unary = +number                       //   + =>  هم میگویند Unary plus  که به اون اصطلاحا   Unary + Operator   سریع ترین راه 

console.log(float," ",int," ",num," ",unary)       //       console.log(1 + parseInt('6'));
 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

console.table میتونیم بیایم و آیتم های یک آرایه که به صورت آبجکت هست رو خیلی بهتر در کنسول ببینیم

const  pedidos = [ { mesa : 10 , nome : "emad" , item : " Piza"} ]

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Optional Chaining

اگر ما قرار باشه بیایم یک سری کلید هایی رو از داخل یک آبجکت بخونیم ولی اون ها داخل آبجکت امون نباشه در جی اس با خطا رو به رو می شویم

 
let user = {}; // یک کاربر بدون ویژگی "address"           alert(user.address.street); // خطا
 
برای ما  undefined حالا ما با استفاده از زنجیره اختیاری میتونیم بیایم و چک کنیم که اگر  همچنین کلیدی وجود نداشت بیا و مقدار 
برگردون و اگر مقدار بود که همون رو نشون بده

let user = {}; // کاربر بدون آدرس

alert( user?.address?.street ); // undefined (بدون خطا)

سینتکس ?. سه حالت دارد

۱- را برمیگرداند undefined وجود داشته باشد در غیر اینصورت مقدار obj را برمیگرداند اگر obj.prop مقدار obj?.prop

۲- را برمیگرداند undefined وجود داشته باشد در غیر اینصورت مقدار  obj را برمیگرداند اگر ‍‍obj.[prop] مقدار obj?.[prop]

۳- را برمیگرداند undefined وجود داشته باشد در غیر اینصورت مقدار obj را صدا میزند اگر obj.method()  مقدار obj?.method ()

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
