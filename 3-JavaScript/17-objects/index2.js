/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
===========================================================================================================

enumrating  object 

1- ما برای این که بیایم و تمام کلید ها یا مقادیر یک آرایه رو بر گردونیم از  دو تا تابع می تونیم بیایم و استفاده کنیم 

Object.keys(obj) / Object.values(obj)

===========================================================================================================

2- entries  : [ [ ]....[ ] ]  entries ( obj ) استفاده از تابع زیر که میاد و یک آرایه دو بعدی از کلید ها و مقدار ها برامون بر میگردونه
 
let obj = {  name: "emad",   family: "taghipur",  exampleFinall: [1, 2, 3, 4, 5, 6, 7]      };

console.log(Object.entries(obj));

===========================================================================================================

1-  object.create(obj)   :::::::
این تابع در اصل میاد و ویژگی های اون شی امون رو در داخل پروتوتایپ اون شی دیگه امون قرار میدهد

let obj1 = { name: "emad", family: "ta",  sayName() {  return "my Name is " + this.name + " " + this.family;   }   }
  
let obj2 = Object.create(obj1);  obj2.name = "ali";    obj2.family = "ya";       obj2.me = "qqqqq";

console.log(obj2);
console.log(obj1.sayName());
console.log(obj2.sayName());

===========================================================================================================

5- Object.freeze  :::::::
این تابع میاد جلوی تغیر یافتن ویژگی ها و مقادیر  یک شی رو جلوگیری میکند و امکان افزودن یا حذف شدن خصوصیات از شی رو  سلب میکند

let obj1 = { name: "emad",  family: "ta",  sayName() {   return "my Name is " + this.name + " " + this.family;   }   }
  
Object.freeze(obj1); console.log(obj1);

console.log((obj1.name = "fdgfdgdf"));
console.log(obj1);
console.log((obj1.area = "fdgfdgdf"));
console.log(obj1);

===========================================================================================================

6- Object.seal :::::::
این تابع خیلی شبیه به بالایی هستش  فقط تفاوتش این هستش  که از اضافه شدن خصوصیت هایی به یک شی میاد و جلوگیری میکنه  اما اجازه ی تغیر اون
پراپرتی  ها یا خصوصیات قبلی رو میدهده

let obj1 = {  name: "emad", family: "ta", sayName() {  return "my Name is " + this.name + " " + this.family;   }   }
 
Object.seal(obj1);      console.log(obj1);

console.log((obj1.name = "fdgfdgdf"));
console.log(obj1);
console.log((obj1.area = "fdgfdgdf"));
console.log(obj1);

===========================================================================================================

7-  getPrototypeOf  :::::::
از این تابع برای دریافت پروتوتایپ در یک شی میایم و استفاده میکنیم  Command Object.getPrototypeOf() [[Prototype]]

let array = ["q", "v"]       ; console.log(Object.getPrototypeOf(array));

که در این مثال میاد و تمام توابعی که برای آرایه ها استفاده میکنیم رو برامون میاره

===========================================================================================================

8-  binding  :::::::  

و میگفتیم که این در این تابع به چی اشاره میکند حالا ما برای این کار 3 تا تابع داریم this  ما یک مبحثی رو در مباحث شی گرایی داریم به نام مبحث باینیگ که میومدیم

call (ObjectTarget,Arg)  :   در همان لحظه اجرا میکنیم و فقط کافی هستش که آرگومنت هامون پشت سر هم قرار میدهیم

apply(ObjectTarget,[Arg]) :  مثل تابع بالایی در همان لحظه اجرا میکند فقط باید آرگومنت هارو به صورت آرایه بهش بدهیم

bind (ObjectTarget,Arg) : این تابع همون لحظه اجرا نمیکند و باید در یک متغیر ریخته و بعد اجرا شودم و متغیر گرفتن اشم پشت سر هم هستش

let obj1 = { name: "emad",  family: "ta",    sayName(arg) { return this.name + " " + this.family + " " + arg;     },     },

let obj2 = { name: "ali",  family: "va",  sayName(arg) { return this.name + " " + this.family + " " + arg; },     },

console.log(obj2.sayName('rrrr'));        //       console.log(obj2.sayName.call(obj1,'rttertertert'));
 
console.log(obj2.sayName.bind(obj1,'rttertertert')());       //       console.log(obj2.sayName.apply(obj1,['rttertertert'])); 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

برای اینکه ببینیم که یک پراپرتی داخل یک شی وجود دارد یا خیر دو تا راه داریم

1- Operator In

 const person = {         age: 89, height: 2.30           }
 
 console.log("age" in person) // true
 
 console.log("weight" in person) // false

یک تفاوتی که  این داره اینه که اون متد مارو میاد و در داخل پروتوتایپ  اش هم چک میکنه و اگر موجود باشه به ما میگه ولی پایین فقط در خود شی میاد و می سنجه

2- hasOwnProperty 

   console.log(person.hasOwnProperty("age")); // true
   console.log(person.hasOwnProperty("weight")); // false

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 */