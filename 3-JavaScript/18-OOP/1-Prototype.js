/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

prototype  :  در داخل   جاوااسکریپت ما   مفهومی به عنوان ارث بری کلاس ها از هم دیگه رو نداریم و صرفا این ارث بری اشیا یا آبجکت ها از یک   دیگر   هستش به این صورت 
که یک شی میاد و به یک شی دیگه اصطلاحا لینک میشه و به این شکل میتونه که بیاد و به محتویات اون دسترسی پیدا بکنه و هر شی در داخل جاوااسکریپت فقط یک پروتوتایپ
دارند و این پروتوتایپ ها به صورت زنجیر وار به هم وصل هستند

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

در داخل پروتو تایپ ها ما چند تا مفهوم اساسی داریم

1- Prototype chain Or [[prototype]]    وقتی یک شی میاد و به یک شی دیگه لینک میشه تا بتونه به محتویات اون دسترسی داشته باشه به این اتصال یا اون چیزی 
که باعث ایجاد اتصال شده اصطلاحا پروتوتایپ چین میگویند

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2- دانگل پروتو  __proto__  : قدیمی برای  اینکه ما بتونیم بیایم و برای اشیا پروتوتایپ تعریف کنیم که بهتر هستش به جای استفاده از این بیایم و از متد های زیر استفاده بکنیم getter setter یک    

-Object.getPrototypeOf(object)           -Object.setPrototypeOf(object,ptototype);           -object.create(prototype,ObjectSelf)           - __proto__

let obj1 = { name: "emad" };    let obj2 = { family: "ta" };     Object.setPrototypeOf(obj1, obj2);       console.log(Object.getPrototypeOf(obj1))

let animal = { eats: true , walk() {  alert("Animal walk")  } }            let rabbit = {  jumps: true,  __proto__: animal   };            console.log(rabbit)
  
let animal = { eats: true  };    let rabbit = Object.create(animal, {  jumps: {  value: true, } });    let rabbit = Object.create(animal, {  jumps: {  value: true, } });

در داخل پروتوتایب میگوید که اگر ما بیایم و در داخل یک شی از پراپرتی ها یا متد های اون  رو تغیر دهیم این تغیر فقط در داخل خود اون شی یا آبجکت state  مفهوم    
ایجاد می شود و در داخل نسخه اصلی به هیچ عنوان تغیر ایجاد نمیکند

let obj1 = { name: "emad", family: "ta" };    let obj2 = { __proto__: obj1, name: "ali" };

console.log(obj2.name);     console.log(obj2.__proto__.name);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3- . constructor :  این تابع میاد و میگه که این شی ما از چه شی اومده و نمونه گرفته شده است و کاربرد اصلی اون در مفاهیم مثل تفاوت کانستراکتور فانکشن ها و فکتوری فانکشن ها هستش 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4- پروتوتایپ در توابع سازنده .prototype  :   پروتوتایپ در توابع سازنده به طور پیش فرض اشاره میکنه به کانستراکتور خودش طبق مثال زیر اگر بخایم بیایم و ببینیم وقتی یک آبجکت از یک 
آبجکت دیگه به ارث میبره  دات کانستراکتور میاد و به سازنده اون شی که به ارث برده شده اصطلاحا اشاره میکنه 

function Car( make , model , year ) {  this.make = make;     this.model = model;       this.year = year;   this.run = function () {  return "speed up to 200";      };      };

var car3 = new Car("ford", "mustang", 1969);       var car4 = new Car("Saipa", "111", 1800 );      console.log( Car.constructor );     console.log( car3.constructor );

function Rabbit ( ) { }        Rabbit.prototype = { constructor: Rabbit }    let rabbit = new Rabbit( )      console.log(Rabbit.prototype.constructor == Rabbit); // true
 
console.log(rabbit.constructor == Rabbit) // true


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

نکات کار با پروتوتایپ ها 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1 //

حال ما میتونیم بیایم و این مقدار پیش فرض رو تغیرش بدهیم ما پروتوتایپ یک تابع رو قبل از نمونه ساختن از اون میتونیم بیایم و تغیرش بدهیم و بعد از اون اگر تغیر بدهیم هیچ تاثیری نداره
و اعمال هم نمی شود این تغیر البته فقط برای ساختن و یا اضافه کردن یک ویژگی جدید هستش

function Rabbit ( ) { }             Rabbit.prototype = {      eats: true        };

let rabbit = new Rabbit ( );    Rabbit.prototype = { };      console.log( rabbit.eats );   // true

ما فقط موقعی میتونیم بیایم و بعد از نمونه سازی از شی بیایم و از  پروتوتایپ استفاده بکنیم که بخایم یک پراپرتی تکراری رو تغیر بدهیم

function Rabbit( ) { }     Rabbit.prototype = {   eats: true     };     let rabbit = new Rabbit();      Rabbit.prototype.eats = false;      console.log( rabbit.eats );   // false
       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2 //

با ورودی نال استفاده بکنیم  Object.create(null);  اگر بخاهیم بیایم و یک شی بدون پروتوتایپ بسازیم باید از متد

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3 //

برای حذف کردن یک ویژگی یا پراپرتی که  در داخل پروتوتایپ هستش باید بیایم و اون رو در داخل پروتوتایپ تغیر اش بدهیم

function Rabbit ( ) {  }     Rabbit.prototype = {  eats: true   };      let rabbit = new Rabbit ( );   delete Rabbit.prototype.eats;       console.log( rabbit.eats ); // undefined
      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   

4 //

چرا در توابع سازنده امون بهتر هستش که بیایم و از  پروتوتایپ استفاده بکنیم ببین وقتی ما میایم و در توابع سازنده امون یا در کلاس هامون یک تابع یا متد میسازیم هنگامی که میایم 
و یک نمونه  یا اصطلاحا ایستنس میگیریم از اون به  ازای هربار نمونه گیری یک بار میاد و اون تابع مارو  تعریف میکنه و در حافظه فضا اشغال میکند حال اگر این متد ما  کلن قراره ثابت  باشه
بهتره ما نیایم و هی باعث کپی گرفتن از اون باشیم باید بیایم و اون رو در پروتوتایپ قرار بدهیم تا ازش کپی گرفته بشه

let obj = { name: "emad" };                 console.log(obj.__proto__ === Object.prototype); // true                   console.log(obj.toString === obj.__proto__.toString); //true
 
console.log(obj.toString === Object.prototype.toString); //true

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

سوال : به تسک های زیر بیا و پاسخ بده 

let animal = {  jumps: null    };
    
let rabbit = {     __proto__: animal,  jumps: true     };
 
alert( rabbit.jumps ); // ? true         

delete rabbit.jumps;

alert( rabbit.jumps ); // ? null

delete animal.jumps;

alert( rabbit.jumps ); // undefined

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
