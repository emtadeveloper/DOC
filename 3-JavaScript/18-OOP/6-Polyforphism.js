 /*
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

polymorphism    یعنی چند شکلی یا چند ریختی  این مفهوم در شی گرایی خیلی کاربرد داره که 
توابعی از والدش ارث بری میکنند و  هم نام اون هستند ولی در شیوه پیاده سازی با اصلی خیلی فرق داره برای مثال ما یک کلاس والدی داریم به نام حیوان و داخل اون یک تابع داریم به
نام والک یا صحبت کردن حالا یکسری کلاس های   دیگه مثل سگ و گربه و شیر رو از این کلاس میایم و ارث بری میکنیم ولی نحوه پیادده سازیی این تابع امون مثل توابع پدرش  نیست
و فقط در اسم یکی هستند ولی در نحوه پیاده سازی باهم فرق دارند  
  
مفاهیم  overriding Vs overloading :

هر دو تای این مفهوم یعنی این که ما یک کلاس ایکس داریم و یک کلاس فلان از اولی اومده و ارث بری کرده و کلاس ایکس ما یک تابع یا یک متدی داشته و در کلاس فرزند ما میتونیم 
 overloading یا overriding  همون تابع با همون شرایط فرخوانی کنیم که در یک شرایطی میان و بهش میگن


overloading اون تابع یا متدی که در کلاس فرزند  نوشته شده همون کار متد پدر رو انجام میده یا تکرار کنه یا بر اساس ورودی که میگیره یک 
پردازشی رو بکنه که ما در جاوااسکریپت  نمیتونیم  بیایم  و همچین مفهومی رو داشته باشیم چون ما در داخل کلاس هامون نمی تونیم متد های
همنام داشته باشیم پس این مفهوم در سطح یک کلاس نداریم همچنین در سطح پدر فرزند و ارث بری نداریم چون برای جاوااسکریپت فرقی نداره
که تابع ما ورودی داشته باشه یا نداشته باشه و براش مهم نیست اصلا       

overriding  :  اضافه کردن یک ارزش افزوده به اون کار اصلی هست یا یک کار دیگه به اون اضافه کنه

نکته : برای  مثال برای مفهوم  لودینگ همون تابع راه رفتن رو در نظر بگیر که در کلاس پدر به نحوی پیاده سازی شده و در کلاس فرزند به نحوی که در اون از پارامتر استفاده شده است که بخاطر
ایرادات زبان جاوااسکریپت قادر به تشخیص این نیستش 

نکته : در هنگامی که یک شی میاد و از یک شی دیگه ارث بری میکند  اگه یکی از متد های اون شی یکی باشد با اونی که ارث بری میکند اولویت با متدی که درون خودش وجود دارد هستش
اما اگر خودش اون تابع نداشته باشه جاوااسکریپت میره و در پدرش دنبال اون تابع میگرده و اگر باز هم نباشه به پدر پدرش میره  تا اون رو بگرده

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/