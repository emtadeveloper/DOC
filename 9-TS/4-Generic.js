/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
==============================================================================================================================================

که یعنی هر چیزی میتونه باشه ولی خوب حالا یک موقعی رو در نظر بگیرید که بخایم ی خورده بهتر کد بزنیم مثلا تابع یا کلاسی که متناسب با نحوه فراخوانی شون نوع اش میاد  any  ما یک نوع تایپ داشتیم به نام 
و تغیر میکنه و موقع استفاده از اون ما نوع اشو مشخص میکنیم برای این جور موقع ها ما میایم و از جنریک ها استفاده میکنیم

Generic Type  :  یعنی تایپ امون متناسب با کدمون بیاد و تغیر بکنه

==============================================================================================================================================

1- functions  :  <T> <A> هر چی دوس دارین بین اون قرار دهید

function logData<T>(data:T) : T {   return data; }     console.log(logData<string>("12123"))    //   console.log(logData<number>(12123))

==============================================================================================================================================

2-  میتونیم بیایم و استفاده بکنیم  interface  و  type  استفاده از جنریک ها به عنوان تایپ هامون که در استفاده از 

interface myLogFuncInterface<T>{   (data: T) : T }

let myLogFunc : myLogFuncInterface<number>;    //   myLogFunc =  function(data: number) : number {  return data }

==============================================================================================================================================

3-  استفاده از جنریک ها در کلاس هامون

class MyArray <T> {

constructor(public data : T[ ] ){ }

addItem(item : T){  this.data.push(item)     }
     
getItem(index : number){  return this.data[index]      }   }
 
let list = new MyArray<string>(["item1","item2"])      list.addItem('4')      console.log(list.getItem(0))

==============================================================================================================================================

4 -  map set استفاده و یا ترکیب جنریک ها با  
  
const items:Map< string,number > = new Map< string,number >( )

items.set('key1',123)      items.set('key2',654)

items.forEach((value,key)=>{   console.log(`${value} ${key} : ${items.get(key)}`)  })
   
const userScore:Set<number> = new Set<number>()

userScore.add(25)  userScore.add(100)

==============================================================================================================================================

نکته ها برای استفاده بهتر از جنریک ها میتونیم به نکات پایین هم توجه داشته باشیم

1 -  < T extends number | string >   برای استفاده از ارث بری جنریک ها 

2-  ما میتونیم بیایم و جنریک ها رو به صورت دوگانه استفاده بکنیم و بگوییم که دو تا جنریک داشته باشیم

< T extends number | string , U >

class MyArray < T extends number | string , U > {

constructor(public data : T [ ] , private data2 : U [ ] ){ }

addItem(item : T){   this.data.push(item)    }
   
getItem(index : number){   return this.data[index]     }  }

let list = new MyArray< string , boolean > ( [ " item1 " , " item2 " ], [ false , true ])           list.addItem('4')        console.log(list.getItem(0))
 
نمونه برای استفاده به صورت  تابع 

function logParameters<T extends numbe r| string ,  U extends boolean | object >(  x : T , y : U ) : void { console.log ( x , y )    }

==============================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
