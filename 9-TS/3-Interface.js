/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
==============================================================================================================================================

interface : قابلیت اجرایی دارند و میتونن بیان و یک قرار داد رو پیاده سازی بکنند و همزمان کدهای اجرایی داشته باشند یعنی متد و abstract  ها هستند با این تفاوت که abstract ها شدیدا شبیه  interface 
استفاده بکنیم extends و implements  ها قرار داد هایی اجرا میکنند که هیچ نوع اجرایی ندارند و اصطلاحا فقط مفهوما برای ارث بری از اینترفیس ها باید از کلمه کلیدی interface  پراپرتی هم داشته باشند ولی 

کاربردی های اینترفیس در تایپ اسکریپت

1- نوع داده ای برای اشیا typeObject           

interface IObj  {  name : string , family ; string }            let mySearch : Obj =  {  name : "emad" , family ; "ta" }

2- نوع داده ای برای توابع typeFunction      
 
interface ISearchFunc {     ( source : string , subString : string ) : boolean  }

let mySearch : ISearchFunc = (source : string , subString : string ) => {  let result = source.serarch(subString)     return result > -1 }

==============================================================================================================================================

3- نوع دادی برای کلاس ها typeClass

interface Istorage {  location : string;   save( ) : boolean;   get( ) : string; }
  
class FileStorage implements Storage {

    public location : string;

    constructor( location : string ) {       this.location = location      }

    public save( ) : boolean {   return true     }

    public get( ) : string {        return 'aaa'     }  }

==============================================================================================================================================

acsess Modifiers encapsulation   سطح دسترسی متغیر هامون

public  در هر صورت بهش دسترسی داریم

private : اگر ما بیایم و یک متغیر رو به این شکل تعریف اش بکنیم در نهایت موقع استفاده یا نمونه گیری و یا ارث بری به این پراپرتی در کلاس امون دسترسی نداریم 

protected :  فقط در کلاس فرزند و کلاس خودش میاد و برامون در  دسترس هستش و اگر بیایم و ازش نمونه گیری کنیم در دسترس ما نیستش
 
readonly : فقط قابلیت خواندن رو داره و امکان تغیر دادن در اون امکان پذیر نیستش و تنها جایی که میتونیم بیایم و برای اون یک مقدار رو قرار بدهیم در داخل متد سازنده
نداره و تنها تفاوتش در این هستش که از اون فقط در پراپرتی ها میایم و استفاده میکینم const  یا کانستراکتور اون هستش  این مودیفایر هیچ فرقی با 

ما این کلمه های کلیدی رو علاوه بر پراپرتی ها هم میتونیم بیایم و برای متد هامون هم استفاده بکنیم

==============================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
