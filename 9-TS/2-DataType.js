/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
==============================================================================================================================================

static typeing :  گفتیم برای مشخص کردن دیتا تایپ های مختلف داخل جاوااسکریپت کافی هستش که از دو نقطه استفاده بکنیم 
     
anjer braket  typeing  <> که برای استفاده از اون داخل  علامت های بزرگ کوچک قرارش میدهیم 

==============================================================================================================================================

انواع تایپ ها در تایپ اسکریپت

1    //     string        //   let name : string = "Emad"       ----        2    //    number    //   let num : number = 224          ----        3    //  boolean       //   let isOn : boolean = true  

4    //      null           //   let Nothing : null = null             ----        5    //  any               //  let  anyThing : any = 'sfdsf'+34   

6    //  array  برای تعریف کردن نوع آرایه چند روش وجود داره

        -    let  List : number[] = [1,2,3]           -    let List : Array<number> = [1,2,3]

        -   tuple //  let  List : [string,number] = ["emad",23]   میگویند که میایم و تعداد عضو ها و نوع اون هارو مشخص میکنیم  tuple به این نوع تعریف آرایه اصطلاحا  
              
7  //  object                 8 //  function                    9 //  enum                        10 //  undefined                        11 //  void
  
داریم این متغیر میتونه علاوه بر یک مقدار عددی  number  همه نوع‌های دیگه هستن. یعنی مثلا وقتی یه متغیر از نوع sub type  به تنهایی کاربرد خاصی ندارن. این نوع‌ها، زیر نوع   Null و Undefined 
هم بگیرد Null و Undefined  مقدار 

==============================================================================================================================================            

Union Type  : استفاده بکنیم به این شکل که اگر مثلا از نوع اولی نبود پس مقدارش دومی بشه OR  این مفهوم میگه ما میتونیم بیایم و برای مشخص کردن نوع یک المان امون یک جور عملگر یا 

let fullname : string | null = "hesam"  

type Assertion  : هستند رو مشخص بکنیم که فقط یک نوع برای خروجی برای استفاده دارند برای این کار کافی هستش  Union Type  با استفاده از این ویژگی میتونیم  بیایم و خروجی توابعی که به صورت
استفاده بکنیم  as  که بیایم و از 

function getPrice (amount: number, format: boolean):   number | string   {    return format ? ` ${amount}  تومان  ` : amount }

let priceWithFormat: string = getPrice(1500, true) as string     let onlyPrice: number = getPrice(1800, false) as number

console.log( { priceWithFormat : priceWithFormat.concat ( 'AAA' ) , onlyPrice } )       //       {  " priceWithFormat ": " 1500  تومان  AAA ",   " onlyPrice"  : 1800     }

optional : استفاده به صورت اصطلاحا که میتونیم بیایم و یک آرگومنت امون رو به صورت آپشنال یا اختیاری به توابع امون بدهیم

let sum = (x : number = 1 , y?: number ,  ...numbers : number[ ] ) => {   if( y ) {  return x + y  }  return x  }   میتونیم بیایم و به شکل زیر استفاده بکنیم rest برای استفاده از 

==============================================================================================================================================

enum : یک سری مقادیر ثابت هستند که میتونیم از اون ها در جاهایی که میخایم استفاده بکنیم این مقادیر معمولا ثابت هستند و تغیر نمیکند و از آن ها میتونیم به عنوان تایپ های مختلف برنامه امون
بیایم و استفاده بکنیم بهترین مثال هم برای استفاده از اون ها در اکشن تایپ ها هستش که به صورت رشته هستند
 
enum Direction {   Up = "Up",    Down = "Down",   left = "left",      Right ="Right"  }          let object = {   direction : Direction.Right  }
    
==============================================================================================================================================

type استفاده از کلمه کلیدی 

بهتر هستش بیایم و موقعی استفاده بکنیم که یک پراپس داریم به نام آبجکت و میخایم ازش استفاده کنیم حالا این جا از این ها استفاده بکنی بهتره

type MyFunc =  (x : number , y : number) => number    //    let sum : MyFunc = ( x , y ) => x + y

type Custom ما میتونیم بیایم و برای اشیا امون اون نوع پراپرتی هایی که میگیره رو مشخص کنیم

ها استفاده بکنیم  interface کردن بود بهتر هستش که بیایم و از extends حالا اگر مایک تایپ داشتیم که اصطلاحا خیلی جنرال تر بود بهتر که نیاز به 

==============================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
