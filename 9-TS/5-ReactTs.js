/*

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=============================================================================================================================================

قرار بدهیم  همچنین وقتی قراره  types.ts  یکی از نکات برای استفاده بهتر از تایپ اسکریپت این هستش که بیایم و برای موقغی که مجبوریم و بیایم و از تایپ ها استفاده بکنیم اون هارو در یک فایل جداگانه به نام 
بیایم و از کانتکس استفاده کنیم بهتر هستش که بیایم و برای تایپ های اون از اینترفیس ها استفاده بکنیم برای مثال کد زیر را ببینید

export Interface ITodo {  name : string , done : boolean ,  id : number }

const Context = React.createContext<ITodo [ ] >( initialState )  در اینجا یک کلک  که زدیم این هستش که بیایم و اینترفیس گفتیم یک آرایه از  اون مقادیر میخایم که میگیره

=============================================================================================================================================

استفاده بکنیم E ها استفاده بکنیم و برای نامگزاری اون ها هم اولشون از حرف enum  هامون بهتر هستش که بیایم و از  userAction  هرجا نیاز به این بود که بیایم و از یک اکشن تایپ استفاده بکنیم مخصوصا در 
همچنین اینترفیس ها میتونن بیان و از هم دیگه ارث بری داشته باشند

export enum  EContextActions {  ADD_TODO = " ADD_TODO " }

export Interface  ContextBasesAction {  type : string }

export Interface ITodo extends  ContextBasesAction { type : EContextActions.ADD_TODO  name : string , done : boolean ,  id : number }

=============================================================================================================================================

ما هر کامپوننتی که میخایم بیایم و با استفاده از تایپ اسکریپت مینویسیم بهتر هستش که بیایم و نوع اشو به صورت زیر و از اینترفیس ها استفاده بکنیم
 
Interface  IBoxes {     box: Array<{ id: number; title: string; description: string }>;      box_image: Array<{ id: number; image: string }>;      }
  
const Box: FC<IBoxes> = ({ box, box_image }) => {     return (    <Container>     </Container>   );     };           export default Box;

=============================================================================================================================================

مقدار دهی بکنیم  const  ما در کد نویسی به صورت فانکشنال  یک نکته ای که باید توجه کنیم این هستش که بیایم و توابع امون رو به صورت فلش دار بنوییسم و اون هارو با استفاده از 

=============================================================================================================================================

useState  استفاده از تایپ اسکریپت به در 

interface IState  {  peoples :  {  id : number , fullName : string , age : number  , img_url : string , bio ?: string  } [ ]     }

const  [ peoples , setPeople ]  = useState<Istate[ " peoples " ]>( [ { id : 1 , fullName : "emad" , age : 19  , img_url : "https : // hamzehazizzadeh ...." , bio : "HI"  } ] )

=============================================================================================================================================

props  استفاده از تایپ اسکریپت به عنوان 

interface IPeople id : number , fullName : string , age : number  , img_url : string , bio ?: string  }

interface IProps { peples : IPeople [ ] }

const List FC<IProps> = ( { peoples } )=> {  return <div> List </div> } 

export default List

=============================================================================================================================================

بر میگردونند jsx  استفاده از تایپ اسکریپت برای توابعی که یک 

const  renderList  : JSX.Element [ ] = proples.map ( ( people )=> { return (  <div> <h1>  { peoples.title } </h1> </div>   )  }  )
   
=============================================================================================================================================

هامون event و setState  استفاده از تایپ اسکریپت برای 

import { Dispatch , FC , FormEvent . useState } from "react"

interface IProps {   peples : IPeople [ ]      setPeoples  : Dispatch<React.SetStateAction<IPeople[] >> }

const handleSubmit = ( event : FormEvent <HTMLFornElement > ) => {   ............    }

=============================================================================================================================================

class App extends Component <IProps , IState > {  
    state = { }
    handle (id L number) {}
    renderr () { return <div > Top Learn </div> }
}

=============================================================================================================================================

ما بعضی وقتا بعضی پکیج هایی که میخایم بیایم و استفاده بکنیم باید بیایم و تایپ های اون رو هم در داخل پروژه امون نصب اش بکنیم

=============================================================================================================================================

// index.js

import App from "./App"

ReactDOM.render ( <React.StrictMode>  <App htm = { <div> Hamze </div>  <React.StrictMode> }  css={ {  background : red } } )

// app.js

import { ReactNode } from "react"
 
const App = ( { htm , css } : { htm : ReactNode or React.Element  }) => {  return <div style={ css }> { htm } </div>    }
     
export default App 

=============================================================================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
