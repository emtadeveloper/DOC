/*
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=============================================================================================================================================

Basic Branching  : در ابتدا که میایم و یک مخزن رو درست میکنیم اولین شاخه که برامون درست میشه شاخه مستر امون هستش و توسعه خودمون رو در داخل این شاخه انجام نمیدیم و  باید بیایم و یکسری
شاخه دیگه رو درست بکنیم و بعد بیایم و این شاخه هایی که درست کردیم رو با این شاخه مستر امون ادغام اشون بکنیم حالا یکی از مزیت های این کار این هستش که اگر به خطایی در یک شاخه خوردیم این خط
فقط در داخل شاخه خودمون باشه و بقیه شاخه ها و کدهارو خراب نکنه

git  branch  or git branch --list  میتونیم بیایم و یک لیست از شاخه هامون رو ببینیم این دستور میاد و شاخه های ما در داخل مخزن لوکال امون رونشون می دهد استفاده بکنیم
     حالا اگر ما نیاز داشتیم که بیایم و تمام شاخه هامون رو در داخل مخزن لوکال و یا ریموت امون باهم ببینیم کافی هستش که فقط بیایم و از دستور 

git branch -a 

git   branch    nameBranch    میتونیم بیایم و یک شاخه جدید رو ایجاد بکنیم    //    git branch  develop 
git   branch  -b  develop   استفاده بکنیم  -b  حالا اگر خواستیم بگیم که بیا و یک شاخه جدید بساز و برو داخل اون شاخه و قرار بگیر کافی هستش که فقط از 

نکته : اگر ما خواستیم بیایم و نام شاخه ای که درست کردیم رو تغیر بدیم میتونیم بیایم و از  دستور زیر استفاده کنیم به این صورت که اول اسم اون شاخه می نویسیم و بعد هم نامی که باید
بیایم و تغیرش بدیم رو براش قرار میدهیم 

git    branch  -m  develop   features  //  تغیر اش میدهیم features رو به شاخه  develop که میایم و نام شاخه 

git checkout   nameBranch     برای رفتن از یک شاخه به یک شاخه دیگه         //     git checkout  develop
git checkout  -b  develop      میتونیم بیایم و یک شاخه دیگه درست کنیم و سوییچ کنیم داخل اون شاخه امون

git checkout - بین دو تا برنچ ای که داریم میاد و تاگل میکنه

git checkout وظایف و کارهایی که این دستور برای ما انجام میدهد 
۱-  جابه جایی بین شاخه های مختلف
۲- کبی فایل ها 
۳- بازگرداند و تغیر دادن کامیت ها

git switch - or nameBranch  این یک دستور جدید تر برای جابه جایی بین شاخه هامون هستش که تنها وظیفه اش همینه

=============================================================================================================================================

کردن کدهامون در داخل گیت دو تا راه حل کلی داریم  merge  ما به طور کلی برای 

1- FAST - FORWAED MERGE : بهمون میده بیایم GitHub دو تا شاخه امون ما دو تا راه حل داریم اولی این هستش که بیایم و با استفاده از خود امکاناتی که merge خوب حالا برای 
استفاده بکنیم راه حل دوم هم این هستش که بیایم و از کد ها این کار رو انجام بدهیم که برای این کار  از دستور New pull  request  و این کار رو بکنیم که برای این کار باید بیایم و گزینه ی 
استفاده master اگر داخل کد زیر بیایم و از کلمه   git merge  develop  master   امون بریم و بعد دستور زیر رو اجرا کنیم master زیر استفاده بکنیم که ابتدا باید  بیایم و به داخل شاخه 
نکنیم میاد و اون کد رو روی شاخه ای که هستش برامون مرج میکنه

2- three WAY MERGE :  و در حالی که داریم این کار رو میکنیم  شاخه والد اون یک تغیراتی میکنه و  کامیت میخورهFeacherA  برای مثال ما داریم میایم و روی یک شاخه کار میکنیم به نام 
حالا ما دیگه نمیتونیم خیلی راحت بیایم و از راه حل اول استفاده بکنیم باید با یک راه حلی این کار رو انجام بدهیم خوب ما برای حل این مشکل نیاز به یک کامیت کمکی داریم که به اصطلاح به 
و این کامیت کمک میکنه تا اون کامیت هایی که داخل شاخه توسعه امون هستش رو بیایم و دونه دونه وارد شاخه اصلی امون بکنیم Mege Commit اون میان و میگن 
 
=============================================================================================================================================

delete Branch 

مرج اش بکن حالا ما که این کار کردیم اگر  که دیگه کاری با شاخه ی توسعه امون نداشتیم میتونیم بیایم و اون رو به طور کامل پاک  master رو داخل شاخه  develop  انگار بیایم و شاخه 
استفاده بکنیم  این دستور میاد و چک میکنه اگر کامیت داشته باشیم یا تغیراتی داشته باشیم که با جایی هنوز مرج   git    branch    --d     develop      اش کنیم که برای این کار از دستور 
نشده باشه میاد و برای ما یک خطا رو ایجاد میکنه که میگه اول برو مرج اش بکن و بعد بیا و حذف اش بکن حالا اگر ما اصلا لازم نداشتیم که بیایم و همچین کاری رو انجام بدیم و به صورتی
که اگر بیایم و این کار  branch    --D     develop   اون کارو به صورت اجبار انجام بدیم فقط کافی هستش که بیایم و از دستور زیر استفاده بکنیم که یک جور اجبار رو برامون درست میکنه 
رو بکنیم همه ی  تغیرات امون میان و ریورت یا کلن بر میگردن به حالت اولیه اشون

git push  origin --delete <name>   نکته : اگر لازم داشتیم که بیایم و یک شاخه رو از داخل مخزن ریموت امون پاک اش بکنیم میتونیم بیایم و از دستور زیر استفاده بکنیم

============================================================================================================================================= 

File   .gitgnore  :  یک موقع  هستش که ما یک سری فایل هامون رو میخایم که فقط در مخزن  لوکال امون داشته باشیم و اون هارو به مخزن ریموت امون ارسال نکنیم خوب برای این کار باید
میکنه به سرور ریموت امون اونها رو نادیده بگیره و ارسالشون نکنه برای مثال میایم و   push   بیایم و نام اون فایل هارو در این فایل قراراشون بدیم تا گیت موقعی که میاد و دستورات ما رو برای
mytools /  داخل این فایل دستور زیر رو قرار میدهیم   

اش برگردونیم به طور untrack امون بکنیم در ابتدا باید اون رو به مرحله  gitgnore خوب حالا اگر ما خواستیم بیایم و یک فایلی که قبل اومده و ترک شده و کامیت شده رو یهویی  وارد این فایل 
کامل یعنی یک جورایی کامیت شدن و ادد شدن اش رو حذف کنیم و بعد ببریم اش به اون مرحله تا بتونیم به این فایل بیایم و اضافه اش بکنیم خوب برای این کار باید بیایم و از دستور زیر استفاده
git     rm    -r    --cached     nameFile   بکنه  untrack  بکنیم تا اون فایل رو به  طور کامل برامون 

=============================================================================================================================================

conflict :  موقعی میاد و ایجاد میشه که دو تا برنامه نویس بیان و روی یک فایل و روی یک خط خاصی از اون فایل کار میکنند این اتفاق برای ما میوفتد به طور کامل یعنی دو تا برنامه نویس
میان و روی دو تا شاخه جدا ولی یک فایل رو تغیر می دهند و موقعی که گیت میخاد بیاد و  تغیرات رو مرج کنه به مشکل میخورند که خود ادیتوری که ازش استفاده میکنیم مید و به ما یکسری
قرار میگیره و بعد از رفع اون بهتره بیایم  name Branch / merging  امکانات برای اینکه مثلا چه خط کد و چه فایلی تغیر کرده و این تغیرات چی بوده رو نشون میدهد و گیت ما میاد و داخل وضعیت 
 resolve conflict  و یک کامیت موفقعیت آمیز بودن کانفلیکت امون رو بزنیم با نام 

=============================================================================================================================================

git flow :  میگوییم  branching model   یک استاندارد برای گیت هستش که برای مدیریت سورس هامون هستش که اصطلاحا بهش 

git flow init   برای استفاده از اون اول اونو باید به پروژه امون اضافه کنیم

Main Branch :   ما سه تا شاخه اصلی داریم   git flow   ما در داخل 

      - Branch Master  :  شاخه اصلی در داخل پروژه امان هستش که دست کاربرمون قرار میگیرد و آخرین نسخه نرم افزارمون در این شاخه قرار دارد
      - Branch Develop  :  شاخه ای هستش که میاد و توسعه دهنده در داخل اون کدهارو توسعه می دهند و حاوی آخرین تغیرات تیم توسعه نرم افزار هستش و قرار هست در ریلیز بعدی پروژه اضافه بشود 
      - Branch Supportive // Create Delete : شاخه هایی هستند که وقتی کارمون با آن ها تمام شد میایم و اون هارو حذف میکنیم این شاخه به طور کلی به ۳ تا زیر شاخه تقسیم می شون

             1- Feature Branch  ||  branch develop   زمانیکه میخاهیم امکان خواستی را به پروژه بسازیم ولی نمیخاهیم شاخه ای را بسازیم و به محض اینکه تمام شد اون رو می بندیم و
                 git flow feature   start  Name       //                git flow feature   finish  Name         ادغامش میکنیم با نسخه توسعه امون و یک انشعاب از شاخه توسعه  هستش
      
             2- Release Branch    ||   branch develop , Master     شاخه هایی هستند که حاوی تعداد زیادی فیچر برنچ هستند مثال ممکن است ما یک نسخه از نرم افزار رو بیایم  و انجام
             بدهیم درحالی که شش تا امکان جدید میخاهیم بهش اضافه بکنیم خوب این جا میاد و شش تا فیچر برنچ ایجاد می شود و زمانی که اون ها اومدن و کامل تکمیل شدن همه ی اون ها 
             که این شاخه رو معمولا یک توسعه دهنده ارشد درست میکند و اون برنچی هستش که قرار هست به عنوان نسخه بعدی نرم افزار  Release Branch   میان و ادغام می شوند داخل این
             ارائه بشود در واقع همه ی فیچر برنچ هامون بعد تکمیل شدن میان و در این شاخه ادغام می شوند و این شاخه میاد و ادغام می شود با برنچ های توسعه و مسترمون و این شاخه می رسد 
             git flow release start name-Feature : 0,1,0'              git flow release finish name-Feature : "0,1,0'                                                     QA  به دست بچه های واحد      

             3- HotFix Branch || branch develop , Master , Release    مستقیما از مستر میاد و فورک میکند بر خلاف قبلی ها            
             زمانی که نسخه ای که منتشر کردیم ازش یک اتفاقی می افتد نیاز به یک ادغام اورژانسی  هست مثلا یک باگ امنیتی یا یک ارور۵۰۰ داشتیم که واجب بود که برای رفع اون میایم 
            و یک برنچ هات درست میکنیم که بعد از رفع اون میایم و با مستر ودولوپ امون ادغامش میکنیم

=============================================================================================================================================
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 */
