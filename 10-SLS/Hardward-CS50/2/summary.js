/*
-----------------------------------------------------------------------------------------------------------------------------------------------

Compiling source code into machine code is actually made up of four smaller steps:
کامپایل کد منبع به کد ماشین در واقع از چهار مرحله کوچکتر تشکیل شده است

preprocessing : در داخل این مرحله تمام توابع و فایل هایی که از کتابخونه هایی که فراخوانی کردیم رو
استفاده کردیم رو میاد و اضافه میکنه به بروژه امون

compiling این مرحله ای هستش که میاد و برنامه ما کدهاشو به اسمبلی ترجمه میکنه اسمبلی دقیقا چیزی هستش که سیستم ما
اون رو درک میکنه و می فهمه

assembling  تبدیل کردن کد های اسمبل شده به باینری 

linking در این مرحله فایل های مختلفی که تا مرحله قبلی رفتن رو میاد و با هم دیگه یکی شون میکنه

مشخص دارند ولی بعد از اون limited چهار عمل اصلی در داخل برنامه نویسی معمولا یک حد خواستی برای درست بودن عملکرد خودشون دارند یعنی یک 
دیگه نمیتونند به خوبی این کار هارو انجام دهند  و به درستی این کار رو نمیکنند برای همین باید خودمون دست به کد شیم و یکسری توابع رو
شروع کنیم به نوشتن براشون

از قبل نوشته شدند و میتونیم بیایم و از اون ها استفاده بکنیم safeSum مثل safe البته یک سری توابع به اصطلاح 

-----------------------------------------------------------------------------------------------------------------------------------------------

Buggy روش های 

۱- در داخل بروژه امون در هر مرحله متوجه اشتباهات امون بشویم console.log و یا printf بیایم با استفاده از توابع 

2- بیایم و این کار رو انجام بدیم VsCode خود Debugger با استفاده از 

۳- بشینی خودت با خودت صحبت کنی و به مشکل کدت بی ببری


-----------------------------------------------------------------------------------------------------------------------------------------------

bool  :  1 byte   //  char : 1 byte   //  double : 8 bytes  
float :  4 bytes  //  int  : 4 bytes  //  long   : 8 bytes

string ? bytes


-----------------------------------------------------------------------------------------------------------------------------------------------

آرایه نوع دیگه ای از داده هستش که میتونیم در داخل اون بیایم و چندین مقدار رو ذخیره بکنیم

هدف ذخیره سازی مقادیر در آرایه ذخیره سازی مقدار حافطه مون نیستش بلکه هدف اون حذف نام های متغیر متعدد هستش

-----------------------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>

int main(void)
{
    char c1 = 'H';
    char c2 = 'I';
    char c3 = '!';

    printf("%i %i %i\n", (int)c1, (int)c2, (int)c3);
}

ما با تغیر دادن نوع میتونیم ببینیم که اون عدد اسکی که اون کاراکتره داره چی هستش طبق مثال بلا

-----------------------------------------------------------------------------------------------------------------------------------------------

رشته ها در اصل آرایه ای از کاراکتر ها هستند و هر کاراکتر نمایش های دودویی اعداد هستش

null : 00000000

ذخیره سازی یک رشته به  این صورت هستش که به ازای هر کاراکتر یک بایت رو ذخیره میکنه و در نهایت هم یک بایت اضافه به عنوان
در داخل ۳ بایت میاد و ذخیره میشه HI بایت نگه دارند که مقدار نال در داخل آن ذخیره میشه رو قرار میدهد انگار کلمه 

H i ! \0 = 4 byte

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    string s = "Hi!";
    printf("%i %i %i %i\n", s[0], s[1], s[2], s[3]);
}

\n  در حافظه به عنوان  یک کاراکتر

-----------------------------------------------------------------------------------------------------------------------------------------------

برای فهمیدن طول یک رشته میتونیم بیایم با استقاده از نکته های بالا این تابع رو بنویسم

#include <cs50.h>
#include <stdio.h>

int string_length(string s);

int main(void)
{
    string name = get_string("Name: ");
    int length = string_length(name);
    printf("%i\n", length);
}

int string_length(string s)
{
    int i = 0;
    while (s[i] != '\0')
    {
        i++;
    }
    return i;
}

-----------------------------------------------------------------------------------------------------------------------------------------------

ما اگر بخایم بیایم و  نگاهی به اسکی مب بکنیم می بینیم که هر حروف با نوع کوچ با حروف نوع بزرگ اش  ۳۲ شماره فاصله داره
که میتونیم بیایم و با استفاده از اون بیاده سازی بکنیم

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    string s = get_string("Before: ");
    printf("After:  ");
    for (int i = 0, n = strlen(s); i < n; i++)
    {
        if (islower(s[i]))
        {
            printf("%c", s[i] - 32);
        }
        else
        {
            printf("%c", s[i]);
        }
    }
    printf("\n");
}

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    string s = get_string("Before: ");
    printf("After:  ");
    for (int i = 0, n = strlen(s); i < n; i++)
    {
        printf("%c", toupper(s[i]));
    }
    printf("\n");
}

-----------------------------------------------------------------------------------------------------------------------------------------------

#include <cs50.h>
#include <stdio.h>

int main(int argc, string argv[])
{
    if (argc == 2)
    {
        printf("hello, %s\n", argv[1]);
    }
    else
    {
        printf("hello , world \n");
    }
}

بیایم و آرگومننت بدیم c ما با استفاده از تیکه کد بالا میتونیم بیایم و به 

-----------------------------------------------------------------------------------------------------------------------------------------------

برای رمز نگاری متون معمولا به شیوه زیر عمل میشود که یک متن ساده به همراه یک کلید رو به یک تابع به عنوان ورودی میدهیم و این تابع میاد
رو به عنوان خروجی میگیره cipher text یا عملیات تبدیل اون به رمز رو انجام میده و در نهایت یک متن رمز نگاری شده cipher و در داخل خودش 

-----------------------------------------------------------------------------------------------------------------------------------------------
*/