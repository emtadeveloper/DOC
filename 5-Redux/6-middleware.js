/*
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

middleware  : های ما دارند dispatch  ها تاکید زیادی روی middleware ها هستند که توسط خود ریداکس توسعه داده شده اند و هنگامی که نصب اشون میکنیم در دسترس ما هستند enhancer  نوع خاصی از 
های ما برسند ما نیاز داریم که بیایم و یکسری عملیات هارو انجام بدیم مثلا بیایم و یک reducer و معمولا به این صورت هستند که زمانی که یکسری اکشن میاد واتفاق میوفته قبل از اینکه این اکشن ها بیان و به دست 
هامون انجام بدیم و نباید در داخل اون ها یکسری  reducer  درخواست به سمت سرور بفرستیم یا یک چیزی لاگ و یا ذخیره بکنیم  همچنین همون طور که قبلا گفته شد ما این جور کارهارو نمیتونیم بیایم و در داخل 
میان و انجام میشوند برای استفاده از اون ها در ابتدا باید بیایم dispatch استفاده بکنیم که در واقع یکسری توابع هستند که در مسیر اتفاق افتادن middleware  داشته باشیم در نتیجه ما باید بیایم و از  sideEffect
رو اضافه بکنیم Api  و یک 
   
ها رد میشوند و بعد به دست اونا میرسند  middleware  ما از فیلتر store های ما به جای این که به صورت مستقیم برسند به دست dispatch : خلاصه 

import { applyMiddleware } from "redux"

function print1( ...args ) {  console.log(args) } رو دریافت میکنیم  getState dispatch امون یعنی store های api  اگر بیایم واز اون ها یک لاگ رو بگیریم می بینیم که میاد و دقیقا دو تا

const store = createStore(rootReducer , preloadedState , applyMiddleware(print1)) 
ها اضافه اش میکنیم middleware هامون با استفاده از تابع enhancer برای اضافه کردنش میایم و اون رو به قسمت 


function print1( storeApi ) {

return function  wrapDispatch( next ) { 

 واقعی مون هستش و باید اون رو در نهایت برگشت بدیم Dispatch همون next تابع   

return function  handleAction (action){ 
انجام بدیم   retrun next(action) با برگشت دادن این تابع به اکشن هامون دسترسی داریم و میتونیم بیایم و از اون ها استفاده کنیم همچنین میتونیم در اینجا 
نهایی امون ارسال بشه Dispatch  تا  

}  }  }

نهایی امون Dispatch بعدی رو فراخوانی میکنیم و در نهایت که دیگه چیزی نباشه میاد و اشاره میکنه به middleware که ما در کد بالا اومدیم نوشتیم در واقع با اون میریم و  retrun next ( action )
  
====================================================================================================================================================

function print1 (storeApi){
      return function wrapDispatch(next){
          return function handleAction(action){
              console.log(1)
             retrun next(action)
          }
      }
}
 
function print2 (storeApi){
      return function wrapDispatch(next){
          return function handleAction(action){
              console.log(2)
            retrun  next(action)
          }
      }
}

const print3 = storeApi => next =>  action => {     console.log('Action :' , action )   return next( action )  console.log( ' new state ' , storeApi.getState ( ) )     }

const store = createStore(rootReducer , preloadedState , applyMiddleware(print1, prin2 , print2))

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================
*/
