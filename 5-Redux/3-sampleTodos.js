/*
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

اگر بزرگ بود یک شی و اگر  کوچک state های گلوبال هامون رو طراحی بکنیم  بهتر هستش اون state  ما وقتی میخایم بیایم و از ریداکس استفاده بکنیم اولین گامی که باید بیایم و انجام بدیم این هستش که بیایم و اون
بود یک آرایه جاوااسکریپتی باشه   

project  redux todos       :::::::::::            todos  :  id / text / complete / color      ////////       fliters  :  status  ( All ,  completed , active ) / colors ( red , green , orange )      

امون رو مشخص کردیم  باید بیایم و اون اکشن هایی که در داخل برنامه داریم رو هم تعریف کنیم state حالا بعد از این که اومدیم و 

1 -  add a new todo entry           2 -  toggle the completed status of a todo           3 - select a color category for todo      4- delete a todo          5- mark all todo as completed

6- clear all completed todos      7- choose a different completed filter value        8- add a new color filter       9- remove a color filter

====================================================================================================================================================

هامون رو به شکل زیر طراحی بکنیم dispatch مرحله بعدی باید بیایم و  

type  :  مشخص میکنه که چه رویدادی داخل برنامه ما به وجود اومده   payload :  مشخص  میکنه که اطلاعات اضافه که نیاز به توصیف رویداد داخل برنامه ما هستش و بهتره اطلاعات کمی داخل اش قرار بدهیم

کوچک و اکشن هامونم مشخص باشه تا بهتر بتونیم در برنامه امون تصمیم بگیریم state تا جای ممکن باید

{ type : "todos/todoAdded" , payload : todoText }      //       { type : "todos/todoToggle" , payload : todoId }       

های مرتبط با اون رو داخل اش قرار بدهیم و بعد از این کار reducer درست کنیم و تمام slice طراحی میکنیم و نیاز به ریداکس داره باید بیایم و یک فایل با پسوند UI خوب حالا ما در کامپوننتی امون که داریم
هامون رو میدهیم و همچنین میایم  reducer تمام combine Reducer که در داخل اون با استفاده از rootReducer داخل اون یک فایل درست میکنیم با نام redux  میایم و یک پوشه درست میکنیم به نام 
که ری اکت ریداکس در اختیار ما provider امون میایم و اون index.js و بعد میایم و فایل های مربوط امون رو در داخل اون قرار میدهیم و در نهایت میایم و در داخل فایل store و یک فایل درست میکنیم با نام
قرار میده رو بهش اضافه میکنیم 

====================================================================================================================================================

Action factory : هامون تولید میکنند dispatch توابع هستند که یک مقدار رو دریافت میکنند و به عنوان خروجی میان و اون آبجکت مدنظر

export const todoToggled = (todoId) => ({ type: "todos/todoToggled", payload: todoId })  // export const todoDeleted = (todoId) => ({ type: "todos/todoDeleted", payload: todoId })
 
====================================================================================================================================================
 
 هامون به جای این که به شکل زیر اون هارو تعریف کنیم به حالت دومی بیایم و از اون استفاده بکنیم state  بهتر هستش برای مدیریت بهتر 

const initState = {   entities: [  { id: 1, text: "Deign ui", completed: true, color: "red" }, { id: 2, text: "discover state", completed: false }  ]  حالت اول

const initState = { entities: {  1: { id: 1, text: "Deign ui", completed: true, color: "red" },     2: { id: 2, text: "discover state", completed: false , } };  حالت دوم 

در حالت دوم ما به المان هامون خیلی راحت تر میتونیم بیایم و دسترسی داشته باشیم
    
====================================================================================================================================================  
    
خوب یک ایرادی که از لحاظ پرفورمنیس خوردیم و باید رفع کنیم این هستش که وقتی که میایم و تیک چک کردن رو برای یکی از تودو ها میزنیم می بینیم که کل اون ها میان و دوباره ری رندر می شوند که این کار از
 رو تعریف کردیم و این جا با هر بار تغیر کردن به خاطر چک const todos = useSelector(selectTodos) اومدیم و TodoList لحاظ پرفورمنسی زیاد جالب نیستش  برای حل این مشکل هم در داخل کامپوننت 
هامون رو یکجا انتخاب بکنیم بلکه میتونیم به یک روش دیگه یک جزو ثابت از اون هارو انتخاب  todos باعث میشه که دوباره این خط کد اجرا بشه و همه آیتم ها دوباره رندر بشن خوب ما لازم نیستش که بیایم و کل 
کنیم به جای اینکه همه اون هارو بیایم و انتخاب بکنیم 

useSelector پارامتر دومی که دریافت میکنه یک تابعی هستش که میاد و دو تا ابجکت قدیمی و جدید که انتخاب کرده دریافت میکنه و داخل اون چک میکنه که این هارو چطوری با هم چک کنه به نام
و وقتی مقدار ها برابر باشند میاد و از رندر شدن دوباره اون ها جلوگیری میکنه shallowEqual که یک مقدار بولین رو بر میگردونه
  
====================================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
