/*
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================================================================================================

برای این کار ها استفاده بکنیم که خیلی بهتر هستش middleware thunk هستند که در ادامه ما میتونیم بیایم و از async رو بنویسم و برای عملیات هایی که به صورت middleware حالا ما میخایم بیایم و خودمون یک 
و صرفا این یک مثال برای شبیه سازی و آموزش هستش

import { composeWithDevTools } from "redux-devtools-extension"          //       import { client } from "./api/client"

const fetchTodosMiddleware = storeApi => next => action => {
    if ( action.type ===  " todos/fetchTodos " ) {
        client.get("todos").then(storeApi . dispatch ({  type : "todos/todoloaded " ,  payload : todos }) })
    }
   return next(action)
}

const store = createStore(rootReducer , preloadedState , applyMiddleware(fetchTodosMiddleware)) 

از اون  useEffect با استفاده ازTodoList که نوشتیم استفاده بکنیم که در چند جا میتونیم بیایم و اون رو استفاده بکنیم اولین جا در خود کامپوننتmiddleware داریم تا از این  dispatch حالا ما نیاز به یک 
 بیایم و این کار رو انجام بدیم App  / index استفاده بکنیم یا هم در داخل فایل 

index با قرار دادن در این قسمت چون اولین چیزی هستش که اجرا میشه میتونیم عملیات هایی که نیاز داریم تا در سریع ترین موقع بیان و اجرا بشند رو در این قسمت قرارشون بدیم

// index.js   

store.dispatch({ type : " todos/fetchTodos "})

 { 1 : { }}  حالا که تکه کد بالا اجرا میشه چون مقدار هایی که بعد از هر درخواست به ما تحویل میدهد یک آرایه هستش و ما باید این آرایه هامون رو بیایم و به 
امون قرار بدهیم reducer شکل بالا تبدیل اشون کنیم باید بیایم و تکه کد زیر رو در داخل 

case "todos/todosLoaded" :      هم کمک گرفتیم immer برای این تکه کد از 
         const  todos = action.payload
         const newEntities = { }
         todos.forEach ( todo => { newEntities[ todo.id ] = todo })
         state.entities = newEntities 

که نوشتیم فقط در حال حاضر داره برای یک حالت خاص کار میکنه اونم موقعی که اون اکشن ما تایپ اش برابر اون مقدار هست و اگر بخایم و برای  middleware  خوب نکته ای که وجود داره این
 بنویسیم که اون بخشی که یک عملیات خاص داره middleware عملیات های مشابه داشتیم بخایم بیایم و این کارو بکنیم برامون سخت هستش یکی از راه حل هایی که وجود داره اینه بیایم و یک
 جدا کنیم

const Middleware ( dispatch , getState ) => {
        client.get("todos").then(storeApi . dispatch ({  type : "todos/todoloaded " ,  payload : todos }) })
}
store.dispatch( Middleware )

====================================================================================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
